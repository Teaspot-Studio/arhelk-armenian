
==================== FINAL INTERFACE ====================
2015-11-03 17:00:14.805965 UTC

interface main@main:Test.Arhelk.Russian.Lemma 7102
  interface hash: 80bff8fda4927c06b2b2e4b055967e08
  ABI hash: a482ec529510b53928eb2d939fd9b354
  export-list hash: 3ee36f251c7ab2daf44609312baa0021
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6a7199c15bf7edb7bbea785849166ce
  sig of: Nothing
  used TH splices: False
  where
exports:
  Test.Arhelk.Russian.Lemma.testModule
module dependencies:
package dependencies: HUnit-1.2.5.2@HUnit_BtnRLgvPKTa5fiI6MJ17K4
                      ansi-terminal-0.6.2.3@ansit_KW0LUY2zB7JCYzE4ZYrwBg
                      ansi-wl-pprint-0.6.7.3@ansiw_KPlSW7tbqXS51Lj59n3FC4
                      arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3
                      arhelk-core-0.1.0.0@arhel_HhwYrYJeeT8CiA1Ohagz9Z
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      base-compat-0.8.2@basec_D4gHocz8sOX8PHzFB3nfQT
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      generic-deriving-1.8.0@gener_1Q2nStr4JSvHfQMGPOhz3e
                      ghc-prim-0.4.0.0 hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      hostname-1.0@hostn_6gCWaeFqrrdGhpJ9RO9xHy integer-gmp-1.0.0.0
                      lens-family-th-0.4.1.0@lensf_1BXbC5Dg0C5GlgOx3ZVBtX
                      lens-family-core-1.2.0@lensf_41RJsMbLUP4I9prGLUphsy
                      lens-family-1.2.0@lensf_BcsUcH7SCv1L4ogXuYAwHp
                      lens-simple-0.1.0.8@lenss_3ClGSemuCIs1em35IPgh6B
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP
                      regex-base-0.93.2@regex_2j0nR3pc4q24HZdEmShSMX
                      regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      template-haskell-2.10.0.0
                      test-framework-0.8.1.1@testf_8uSW5zp8R282owJnffubva
                      test-framework-hunit-0.3.0.2@testf_9m8MDkso6S86g4W4CAJCaz
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      text-show-2@texts_6msSD0wSAlK5unkkd9ynxr
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
                      xml-1.3.14@xml_A51W7Krf6npGWsiTbJ1zZV
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         regex-base-0.93.2@regex_2j0nR3pc4q24HZdEmShSMX:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl:Text.Regex.Posix.String
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Applicative
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Concurrent
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Exception
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Monad.ST
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Array
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Bool
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.ByteString
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Char
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Complex
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Data
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Dynamic
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Either
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Fixed
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Floating
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Functor.Identity
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Integral
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.List
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Maybe
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Monoid
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ord
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Proxy
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ratio
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Text
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Tuple
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Coercion
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Equality
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Typeable
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Version
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Void
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.C.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.Ptr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Event
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Fingerprint
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Generics
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.RTS.Flags
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.StaticPtr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Stats
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.TypeLits
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Numeric.Natural
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Exit
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.IO
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Posix.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Text.Read
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics base-4.8.1.0:GHC.TypeLits
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  HUnit-1.2.5.2@HUnit_BtnRLgvPKTa5fiI6MJ17K4:Test.HUnit 2e0adc927cee2a7259c21d19424abdb9
import  -/  HUnit-1.2.5.2@HUnit_BtnRLgvPKTa5fiI6MJ17K4:Test.HUnit.Base c32e2674ade4c4513596997f6fde93a5
import  -/  HUnit-1.2.5.2@HUnit_BtnRLgvPKTa5fiI6MJ17K4:Test.HUnit.Lang 725a058f95254d298f18b6ea2dcde9c9
import  -/  arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma 58136fa1744d25a2e67d209e4eb129d2
import  -/  arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Adjective f6441ac24d7a68e47aeb2e0aa1c4452a
import  -/  arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Adverb a18a581b092c17527edaab96b01103e3
import  -/  arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Particle e577b64d9027edd9910f0ccac2d22e02
import  -/  arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Substantive 569baa52465cadf3159fd186a2526eda
import  -/  arhelk-armenian-0.1.0.0@arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Verb 8eb0f3269b39d3fddc6514685c60976b
import  -/  arhelk-core-0.1.0.0@arhel_HhwYrYJeeT8CiA1Ohagz9Z:Arhelk.Core.Rule 5f2bb1b3b57569c2a9e86346b388ba5e
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.1.0:Data.List 2a4f5f92892d432e7113f64cd9dcca53
import  -/  base-4.8.1.0:Data.Monoid bd73caba6e77f9944cb89ef5bec300c6
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  test-framework-0.8.1.1@testf_8uSW5zp8R282owJnffubva:Test.Framework 47c691499ef3000809ac8e7764e692f7
import  -/  test-framework-0.8.1.1@testf_8uSW5zp8R282owJnffubva:Test.Framework.Core db9441d9d6462719451e7d67032979e8
import  -/  test-framework-hunit-0.3.0.2@testf_9m8MDkso6S86g4W4CAJCaz:Test.Framework.Providers.HUnit 58e3c96a93c97a50ca9ee279ee177cbb
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text a305d268b7ef3fbd1de87bd464ac8e2a
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Internal 9aaf446b91649c416d85a19f08d51f8e
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show 247f8009f433354faed2b5a5615705b2
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow f98816fc41e1809d42ba206af16c7297
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes 2c021982bdb0927c661f3d4c9188a464
6ef579aca471d258ac7ec846f9bc6e96
  testModule :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Test.Arhelk.Russian.Lemma.testModule127
                   Test.Arhelk.Russian.Lemma.testModule1) -}
f4f4ded610c3cd67387e54edf3d9a4b0
  testModule1 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule115
                   Test.Arhelk.Russian.Lemma.testModule2) -}
ef70e18a12503a13131ecb5ab1ed6d61
  testModule10 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule29
                   Test.Arhelk.Russian.Lemma.testModule11) -}
eac10b921dac31e549d44ac3e26e6695
  testModule100 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule109
                   Test.Arhelk.Russian.Lemma.testModule101) -}
6186c9cca987742cf0a67a1bcf2a1fc9
  testModule101 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule108
                   Test.Arhelk.Russian.Lemma.testModule102) -}
c567a5fdc92a15aa5963b8c7c0a3cc52
  testModule102 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule107
                   Test.Arhelk.Russian.Lemma.testModule103) -}
bd73721aa07f9425fb5c62afcd0dd5b5
  testModule103 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule106
                   Test.Arhelk.Russian.Lemma.testModule104) -}
94235a03fdc396f3d3d7656d1cbda8db
  testModule104 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule105
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
ec8da87177de89e76ca17dd86b18b11b
  testModule105 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\208\\190\\208\\188"#) -}
ed758105dfc5bbbe5ca74a8b639d607d
  testModule106 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\209\\139\\208\\188"#) -}
44a5f4fe697e8d5c61a1b1847e31b68d
  testModule107 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\208\\190\\208\\188\\209\\131"#) -}
f0cddaf81ef7bde424f86f65d5a7389f
  testModule108 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\208\\190\\208\\185"#) -}
c34d18bac38e22a3522839311a49d54a
  testModule109 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\208\\190\\208\\179\\208\\190"#) -}
7fb40485f55c273c7868db2b4487892a
  testModule11 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule23
                   Test.Arhelk.Russian.Lemma.testModule12) -}
5404104b5a3b217a1a030d96e4db0d3a
  testModule110 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\209\\139\\209\\133"#) -}
e73da43230ded66d2b0391ed4aee6974
  testModule111 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\209\\139\\208\\181"#) -}
036768739780432f1123ed01e22b09db
  testModule112 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\208\\190\\208\\181"#) -}
b24629f002a84f959b19358041e8695c
  testModule113 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\208\\176\\209\\143"#) -}
219ce079eb06da9ea9b5803af7a8aff7
  testModule114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Root \\208\\186\\209\\128\\208\\176\\209\\129\\208\\189"#) -}
f66a4f6bd2d61bb73cafcdf855347a41
  testModule115 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule126
                   Test.Arhelk.Russian.Lemma.testModule116
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
520e98c5b7f71ff9e60b324b986dd285
  testModule116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Arhelk.Russian.Lemma.testModule91
                   Test.Arhelk.Russian.Lemma.testModule117) -}
f166926a1344e49da8795a63c542a659
  testModule117 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule125
                   Test.Arhelk.Russian.Lemma.testModule118) -}
7b9f1b1e6e36c4a5c449e6c55ec08158
  testModule118 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule124
                   Test.Arhelk.Russian.Lemma.testModule119) -}
ac35ee944d7102ed1960f46689b42f66
  testModule119 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule123
                   Test.Arhelk.Russian.Lemma.testModule120) -}
bc4eef17b68f4c275b0bda6df20de9dc
  testModule12 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule13
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
40d7fb2390d0ab9bf034a275e9a9cbe3
  testModule120 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule70
                   Test.Arhelk.Russian.Lemma.testModule121) -}
84b18bf2a5dc8cb557ba53c4899bb005
  testModule121 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule122
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
711968ac35ad2b5a622c8a15b9e0ada3
  testModule122 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\180\\208\\181\\209\\128\\208\\181\\208\\178\\208\\181"#) -}
082480176219bca908bab2c887ffdbdc
  testModule123 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\180\\208\\181\\209\\128\\208\\181\\208\\178\\208\\176"#) -}
5620c09104409c0442b030d928eb2215
  testModule124 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\180\\208\\181\\209\\128\\208\\181\\208\\178\\209\\140\\209\\143"#) -}
1c0d1fc0548ccb459cd9c1ecbd0e814a
  testModule125 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\180\\208\\181\\209\\128\\208\\181\\208\\178\\208\\190"#) -}
9a9420fad481aa787b7cec3fb997f58d
  testModule126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Root \\208\\180\\208\\181\\209\\128\\208\\181\\208\\178"#) -}
90ece1d328115e4f9586f7d42344e721
  testModule127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lemmanization"#) -}
a78f190f1da8aee756081e033d60be9b
  testModule13 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule22
                   Test.Arhelk.Russian.Lemma.testModule14) -}
9d3b1a5e3f768259a1f45a9d4070b6d5
  testModule14 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule15
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
461289fa4946480109189aee14386ffa
  testModule15 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule16) -}
6ed6694f677c0dec50318e99ecbab805
  testModule16 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg) -}
8c1f8dff08fc5e18b7ad17bca72b56d0
  testModule17 :: [Data.Text.Internal.Text]
  {- Unfolding: (Data.Text.Lazy.dropEnd_go
                   Test.Arhelk.Russian.Lemma.testModule18) -}
6b8a8b8381f45b87f7330f8bfbac3b9e
  testModule18 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (Data.Text.Internal.Builder.$wtoLazyTextWith
                   112
                   Test.Arhelk.Russian.Lemma.testModule19
                     `cast`
                   (Trans
                        (forall s.
                         <Data.Text.Internal.Builder.Buffer s
                          -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                         ->_R <Data.Text.Internal.Builder.Buffer s>_R
                         ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                        (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
e345e4fabfea0cd14368508073189f37
  testModule19 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3,
     Unfolding: (Arhelk.Russian.Lemma.Data.Particle.$fTextShowParticleProperties1
                   Test.Arhelk.Russian.Lemma.testModule20) -}
9fa639fe91ce43ac8b9ffa42ac54665c
  testModule2 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule93
                   Test.Arhelk.Russian.Lemma.testModule3) -}
511dae658c9d2aa51ea8a3cefe07696c
  testModule20 ::
    [Arhelk.Russian.Lemma.Data.Particle.ParticleProperties]
  {- Unfolding: (case GHC.List.elem
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        Test.Arhelk.Russian.Lemma.testModule21
                        Arhelk.Russian.Lemma.Particle.particles of wild {
                   GHC.Types.False
                   -> GHC.Types.[]
                        @ Arhelk.Russian.Lemma.Data.Particle.ParticleProperties
                   GHC.Types.True
                   -> GHC.Types.:
                        @ Arhelk.Russian.Lemma.Data.Particle.ParticleProperties
                        Arhelk.Russian.Lemma.Data.Particle.ParticleProperties
                        (GHC.Types.[]
                           @ Arhelk.Russian.Lemma.Data.Particle.ParticleProperties) }) -}
36812e211e401351fcbb5edf8c270c02
  testModule21 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\177\\209\\139"#) -}
5e7662e9c8cc1051f11fdc4d5afafbd2
  testModule22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Particle \\208\\177\\209\\139"#) -}
66499d646bb5ff85857b6081ed2bd913
  testModule23 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule28
                   Test.Arhelk.Russian.Lemma.testModule24) -}
487c1820b80fc2df8204c42ee843ee04
  testModule24 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg1 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule25
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
364b2b8872f4bb4e35261d03e8c35864
  testModule25 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule26) -}
485a21709984b920530ad36782b721c9
  testModule26 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg1) -}
e08ccef57311c7de0c660ba2b0cba9df
  testModule27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\209\\130\\208\\184\\209\\136\\208\\181"#) -}
bd5c0ad2fce0f06bd390554f850ee3af
  testModule28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Adverb \\209\\130\\208\\184\\209\\136\\208\\181"#) -}
dfe6946f4ba66c192477eb3401105355
  testModule29 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule34
                   Test.Arhelk.Russian.Lemma.testModule30) -}
71f7b749ff0cfbd589bf6828db873c56
  testModule3 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule72
                   Test.Arhelk.Russian.Lemma.testModule4) -}
b7d03573d68aff63591586ec8d2ef0ba
  testModule30 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg2 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule31
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
60eb657cd011b4e5f7c9608554b00a26
  testModule31 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule32) -}
04239d71463e46d8266571de60946090
  testModule32 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg2) -}
90c135e88c2a21743a3545f558051f1d
  testModule33 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\209\\130\\208\\184\\209\\133\\208\\190"#) -}
67714cfb9207ba35dcbdf99da468b714
  testModule34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Adverb \\209\\130\\208\\184\\209\\133\\208\\190"#) -}
55b1995ef35b37048995769f53b6ade9
  testModule35 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule40
                   Test.Arhelk.Russian.Lemma.testModule36) -}
1628f253c195dfc0c45b6d04fbd28065
  testModule36 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg3 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule37
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
b1c58b5a38dc71b907033475255f5c22
  testModule37 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule38) -}
3fa536ca42ba4c3a716cfe3b1c984913
  testModule38 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg3) -}
fd7e8c46011c676e1a07dcd0ce9c80a6
  testModule39 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187"#) -}
eaae2562a34c692cded8cb5c649b4bb7
  testModule4 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule65
                   Test.Arhelk.Russian.Lemma.testModule5) -}
98ec44b184b978a5049dadcdd704c1b5
  testModule40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Verb \\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187"#) -}
3e083c124e353794941b01b081d8907b
  testModule41 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule46
                   Test.Arhelk.Russian.Lemma.testModule42) -}
310f8890e4f9ef113665fd88274e099f
  testModule42 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg4 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule43
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
eaec09c6fdbaaa6278da7f91725bc28e
  testModule43 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule44) -}
db2e5ed134ad0d10e214f61ed9ee9740
  testModule44 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg4) -}
0d98dee0a22cd12fe34bc81aff54536f
  testModule45 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\184\\208\\179\\209\\128\\208\\176\\209\\130\\209\\140"#) -}
09505e756fe2209da6da5ff2b77e7d30
  testModule46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Verb \\208\\184\\208\\179\\209\\128\\208\\176\\209\\130\\209\\140"#) -}
0a33168862cfcb2dfbcd639a2fade036
  testModule47 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule52
                   Test.Arhelk.Russian.Lemma.testModule48) -}
f7d96300fd02031e2c63fb7ac9351269
  testModule48 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg5 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule49
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
6225f749edc02383304c1ac135b8dee5
  testModule49 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule50) -}
6bab1a59931b7d90c73cfa8bcd99aca7
  testModule5 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule59
                   Test.Arhelk.Russian.Lemma.testModule6) -}
58849f34a615743a3190c5c714e437b1
  testModule50 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg5) -}
70adf86127e98cdc97c71be1a423a337
  testModule51 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\131\\209\\142\\209\\130"#) -}
18244d7917fc57d2228edeab0db8f451
  testModule52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Verb \\208\\186\\209\\131\\209\\142\\209\\130"#) -}
ef6b6b77e74c89e40db52070b5be3efd
  testModule53 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule58
                   Test.Arhelk.Russian.Lemma.testModule54) -}
716322aa85c0db260b7997d01689d9a3
  testModule54 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg6 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule55
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
20c16f0d2941fd6b47ef7465f9b5b079
  testModule55 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule56) -}
249fc5e6d5dee1a80e112256acd0f02b
  testModule56 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg6) -}
6ad4c3d48e5d2e987d9f9186eb11b5b4
  testModule57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\208\\190\\208\\178\\208\\176\\209\\130\\209\\140"#) -}
b2767490e0ff002b4e68cac71923bb54
  testModule58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Verb \\208\\186\\208\\190\\208\\178\\208\\176\\209\\130\\209\\140"#) -}
23077db96fc71f87b830b941f7575f0d
  testModule59 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule64
                   Test.Arhelk.Russian.Lemma.testModule60) -}
a529c3a2867f1231b6e00bd5fc0f8dd3
  testModule6 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule53
                   Test.Arhelk.Russian.Lemma.testModule7) -}
70714634d4235745056de4da13195d72
  testModule60 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg7 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule61
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
38ae48d314e796a74088f771cfd04845
  testModule61 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule62) -}
06d3df9af8aa81c61bacda9c4c84a378
  testModule62 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg7) -}
7971cc161c95b71b682fd9eb9851813f
  testModule63 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\209\\139\\208\\185"#) -}
1898b3d663dad5abb9c57d74d942c4d3
  testModule64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Adjective \\208\\186\\209\\128\\208\\176\\209\\129\\208\\189\\209\\139\\208\\185"#) -}
902f77e8a55639efc6e20e7f050790ac
  testModule65 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule71
                   Test.Arhelk.Russian.Lemma.testModule66) -}
4cca4733658fa9b86ede0accb5d76609
  testModule66 :: Test.Framework.Providers.HUnit.TestCase
  {- Unfolding: (case Control.DeepSeq.$dNFData_$crnf1
                        @ GHC.Types.Char
                        Control.DeepSeq.$dNFData_$crnf2
                          `cast`
                        (Sym (Control.DeepSeq.NTCo:NFData[0] <GHC.Types.Char>_N))
                        Test.Arhelk.Russian.Lemma.testModule_msg8 of wild { () ->
                 (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  GHC.Prim.raiseIO#
                    @ GHC.Exception.SomeException
                    @ ()
                    Test.Arhelk.Russian.Lemma.testModule67
                    eta)
                   `cast`
                 (Trans
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0]))) }) -}
746140800b16f58845309ffaafcebab6
  testModule67 :: GHC.Exception.SomeException
  {- Unfolding: (Test.HUnit.Lang.$fExceptionHUnitFailure_$ctoException
                   Test.Arhelk.Russian.Lemma.testModule68) -}
2d6f6b5b7f39a6d4799f3657b1c883ec
  testModule68 :: Test.HUnit.Lang.HUnitFailure
  {- Unfolding: (Test.HUnit.Lang.HUnitFailure
                   Test.Arhelk.Russian.Lemma.testModule_msg8) -}
ff31fb45dd9b32cfea05bd3de39b9cd7
  testModule69 ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Data.Functor.Identity.Identity
         ((), [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties])
  {- Unfolding: (Arhelk.Russian.Lemma.Substantive.substantive1
                   Test.Arhelk.Russian.Lemma.testModule70) -}
8e80c482d4e1ae44de023bff9415273c
  testModule7 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule47
                   Test.Arhelk.Russian.Lemma.testModule8) -}
7df9fb821870e1f150729f3e62795e7c
  testModule70 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\180\\208\\181\\209\\128\\208\\181\\208\\178\\209\\140\\208\\181\\208\\178"#) -}
ce6ee8879797ba551e3eee1500c85e11
  testModule71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Substantive \\208\\180\\208\\181\\209\\128\\208\\181\\208\\178\\209\\140\\208\\181\\208\\178"#) -}
f5bb25640a5999e4ffa83e9d82f8f9c9
  testModule72 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule92
                   Test.Arhelk.Russian.Lemma.testModule73
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
4585733c3be4330826bb5073f79ca34e
  testModule73 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Arhelk.Russian.Lemma.testModule91
                   Test.Arhelk.Russian.Lemma.testModule74) -}
3e7f91b73244e8d16d3c3ffbd92e454d
  testModule74 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule90
                   Test.Arhelk.Russian.Lemma.testModule75) -}
b0efcfbb3fcf059ea847a8022d5f9535
  testModule75 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule89
                   Test.Arhelk.Russian.Lemma.testModule76) -}
88eca45e59e1a50e8855f4239ed6d9a1
  testModule76 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule88
                   Test.Arhelk.Russian.Lemma.testModule77) -}
2355f8b4324d335b1b7f6b52650f2287
  testModule77 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule39
                   Test.Arhelk.Russian.Lemma.testModule78) -}
8332b25b4492fb8f619826e810046849
  testModule78 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule87
                   Test.Arhelk.Russian.Lemma.testModule79) -}
968f983437d21e7bed483f858a015814
  testModule79 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule86
                   Test.Arhelk.Russian.Lemma.testModule80) -}
827d276bc760b22b0d99821a96f43646
  testModule8 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule41
                   Test.Arhelk.Russian.Lemma.testModule9) -}
2be840bac6ece31a0bafa7935bb5be23
  testModule80 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule85
                   Test.Arhelk.Russian.Lemma.testModule81) -}
8566a3a132486885dc820e82dcf580b7
  testModule81 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule84
                   Test.Arhelk.Russian.Lemma.testModule82) -}
7c0870b43174fb03bbb05c6cd06add80
  testModule82 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule83
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
bcd4fedecb27e1edd5bcebcccb8117da
  testModule83 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\180\\208\\190\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187"#) -}
01ee31a55a85934c14ab67588335fb65
  testModule84 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\191\\208\\190\\208\\180\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187\\208\\190"#) -}
aef6484fbfd352d59f55e0dfd41884bb
  testModule85 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187\\208\\190"#) -}
e9dfae7571dc5d3bf2710ac3dfbb689e
  testModule86 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\191\\208\\181\\209\\128\\208\\181\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187\\208\\176"#) -}
a93d58778721e3d1c2050fedf1bf076a
  testModule87 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\208\\187\\208\\176"#) -}
d333f1de801633ef607f6c6943ef13a2
  testModule88 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\191\\208\\181\\209\\128\\208\\181\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\209\\130\\209\\140"#) -}
240d33b131a7ee599861bfdc144d83c7
  testModule89 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\208\\191\\208\\190\\208\\180\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\209\\130\\209\\140"#) -}
72512db85f8c89e9e82925a7da54016e
  testModule9 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Test.Arhelk.Russian.Lemma.testModule35
                   Test.Arhelk.Russian.Lemma.testModule10) -}
b3313e4b907edea52242956bb5250f74
  testModule90 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\209\\129\\208\\186\\208\\176\\208\\183\\208\\176\\209\\130\\209\\140"#) -}
ca0ddc8aadd485e1320e21f42428f3d3
  testModule91 ::
    [Data.Text.Internal.Text]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><L,U> -}
a2620537fcd3d10f08b3f510c6920c46
  testModule92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "Root \\209\\129\\208\\186\\208\\176\\208\\183"#) -}
ab01f93b8fdc8ded0a9152ceeddd5cbc
  testModule93 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Test.Arhelk.Russian.Lemma.testModule114
                   Test.Arhelk.Russian.Lemma.testModule94
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
c96f445ef1da741fa4b939e5d2835456
  testModule94 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Arhelk.Russian.Lemma.testModule91
                   Test.Arhelk.Russian.Lemma.testModule95) -}
a92b2a0ca2ab175643d7f1dcaf14d87e
  testModule95 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule63
                   Test.Arhelk.Russian.Lemma.testModule96) -}
b4a6b857f97656b048060b597c0aa87f
  testModule96 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule113
                   Test.Arhelk.Russian.Lemma.testModule97) -}
32675c66b25c1bfd3d98500a7c274eeb
  testModule97 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule112
                   Test.Arhelk.Russian.Lemma.testModule98) -}
c91a5b503369ae3c2f5063cbe1c1c588
  testModule98 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule111
                   Test.Arhelk.Russian.Lemma.testModule99) -}
38a86560d52461e8553fa93a21c694e2
  testModule99 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Test.Arhelk.Russian.Lemma.testModule110
                   Test.Arhelk.Russian.Lemma.testModule100) -}
22a3f8f91398a5496abb6193931e7df1
  testModule_msg :: GHC.Base.String
  {- Unfolding: (case Data.Text.concat
                        Test.Arhelk.Russian.Lemma.testModule17 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild2 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 }) -}
319de230cafb1d2c47a24869cd804221
  testModule_msg1 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Adverb.adverb
                          Test.Arhelk.Russian.Lemma.testModule27)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Adverb.$fMonoidAdverbProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Adverb.$fTextShowAdverbProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
f9f0da23ae73f46bfa55bc584b03d1bb
  testModule_msg2 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Adverb.adverb
                          Test.Arhelk.Russian.Lemma.testModule33)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Adverb.$fMonoidAdverbProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Adverb.$fTextShowAdverbProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
b5ae1b4ccfeb96b36347ec16008fefee
  testModule_msg3 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Verb.verb
                          Test.Arhelk.Russian.Lemma.testModule39)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Verb.VerbProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
b8cef2c4f95be32d06e93d27b96122a6
  testModule_msg4 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Verb.verb
                          Test.Arhelk.Russian.Lemma.testModule45)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Verb.VerbProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
f2011443a72e59f4c9a65b51cf6211a9
  testModule_msg5 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Verb.verb
                          Test.Arhelk.Russian.Lemma.testModule51)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Verb.VerbProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
8fa3b39fe23188b569cd69ed22ce8e82
  testModule_msg6 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Verb.verb
                          Test.Arhelk.Russian.Lemma.testModule57)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Verb.VerbProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Verb.VerbProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Verb.VerbProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
26cc8af1c91b47ddca741e72e50f7bb1
  testModule_msg7 :: GHC.Base.String
  {- Unfolding: (case ((Arhelk.Russian.Lemma.Adjective.adjective
                          Test.Arhelk.Russian.Lemma.testModule63)
                         `cast`
                       (Trans
                            (Arhelk.Core.Rule.NTCo:RuleM[0]
                                 <Arhelk.Russian.Lemma.Data.Adjective.AdjectiveProperties>_R
                                 <[Arhelk.Russian.Lemma.Data.Adjective.AdjectiveProperties]>_N <()>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Arhelk.Russian.Lemma.Data.Adjective.AdjectiveProperties>_R
                                 <Control.Monad.Trans.Writer.Lazy.WriterT
                                    [Arhelk.Russian.Lemma.Data.Adjective.AdjectiveProperties]
                                    Data.Functor.Identity.Identity>_R
                                 <()>_N))
                         Arhelk.Russian.Lemma.Data.Adjective.$fMonoidAdjectiveProperties_$cmempty)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <[Arhelk.Russian.Lemma.Data.Adjective.AdjectiveProperties]>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.NTCo:Identity[0]
                                <((),
                                  [Arhelk.Russian.Lemma.Data.Adjective.AdjectiveProperties])>_R)) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Adjective.$fTextShowAdjectiveProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
86dda96407ba17c43ed2996334ea4bc2
  testModule_msg8 :: GHC.Base.String
  {- Unfolding: (case (Test.Arhelk.Russian.Lemma.testModule69
                         Arhelk.Russian.Lemma.Data.Substantive.$fMonoidSubstantiveProperties_$cmempty)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <((),
                             [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties])>_R) of wild { (,) ds1 y ->
                 case Data.Text.concat
                        (Data.Text.Lazy.dropEnd_go
                           (Data.Text.Internal.Builder.$wtoLazyTextWith
                              112
                              (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_$cshowbList
                                 y))) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a1 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild3 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                     10)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                               65536)))
                                      ($wunfold (GHC.Prim.+# ww 2)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

