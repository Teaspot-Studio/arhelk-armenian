
==================== FINAL INTERFACE ====================
2015-11-03 17:00:11.83298 UTC

interface arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Adverb 7102
  interface hash: ddd70c523acc6fa9adc6fdf6171dc55f
  ABI hash: a18a581b092c17527edaab96b01103e3
  export-list hash: fdcd4e9f3bfb817d777ef5a7995598b8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b937297e2cc5479bdeb594ad07c90aff
  sig of: Nothing
  used TH splices: False
  where
exports:
  Arhelk.Russian.Lemma.Adverb.adverb
module dependencies: Arhelk.Russian.Lemma.Common
                     Arhelk.Russian.Lemma.Data Arhelk.Russian.Lemma.Data.Adjective
                     Arhelk.Russian.Lemma.Data.Adverb Arhelk.Russian.Lemma.Data.Common
                     Arhelk.Russian.Lemma.Data.Particle
                     Arhelk.Russian.Lemma.Data.Substantive
                     Arhelk.Russian.Lemma.Data.Verb
package dependencies: arhelk-core-0.1.0.0@arhel_HhwYrYJeeT8CiA1Ohagz9Z
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      base-compat-0.8.2@basec_D4gHocz8sOX8PHzFB3nfQT
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      generic-deriving-1.8.0@gener_1Q2nStr4JSvHfQMGPOhz3e
                      ghc-prim-0.4.0.0 hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      integer-gmp-1.0.0.0
                      lens-family-th-0.4.1.0@lensf_1BXbC5Dg0C5GlgOx3ZVBtX
                      lens-family-core-1.2.0@lensf_41RJsMbLUP4I9prGLUphsy
                      lens-family-1.2.0@lensf_BcsUcH7SCv1L4ogXuYAwHp
                      lens-simple-0.1.0.8@lenss_3ClGSemuCIs1em35IPgh6B
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      template-haskell-2.10.0.0 text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      text-show-2@texts_6msSD0wSAlK5unkkd9ynxr
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Applicative
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Concurrent
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Exception
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Monad.ST
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Array
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Bool
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.ByteString
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Char
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Complex
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Data
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Dynamic
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Either
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Fixed
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Floating
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Functor.Identity
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Integral
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.List
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Maybe
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Monoid
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ord
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Proxy
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ratio
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Text
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Tuple
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Coercion
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Equality
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Typeable
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Version
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Void
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.C.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.Ptr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Event
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Fingerprint
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Generics
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.RTS.Flags
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.StaticPtr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Stats
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.TypeLits
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Numeric.Natural
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Exit
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.IO
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Posix.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Text.Read
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics base-4.8.1.0:GHC.TypeLits
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  Arhelk.Russian.Lemma.Common 95ca7a2489add696eb677c42508e534e
  exports: a3253707ed7b58b0c2eb7c10104c4cc3
  endsWith 1b6e8a16665178c4d0540e55b713bc78
import  -/  Arhelk.Russian.Lemma.Data 345adbad80851246740ad35896948ce9
  exports: 1b65b4fe554f1c19c1b4690d610ea84c
import  -/  Arhelk.Russian.Lemma.Data.Adjective 1051c98a64f2248696bb68d7ea004fb2
  ComparitiveDegree e249620f8129b5e600f43441fc7f96c8
  PositiveDegree efb672f6b4f6ff958799387e36f0f326
import  -/  Arhelk.Russian.Lemma.Data.Adverb 36e92ebb6de25e7b5e9fcfdcab0576d1
  AdverbProperties 15d27584ad5ef7c1c7f524c0f64c9cfe
  adverbDegree d357e305607772cede2f814a352574e5
import  -/  arhelk-core-0.1.0.0@arhel_HhwYrYJeeT8CiA1Ohagz9Z:Arhelk.Core.Rule 5f2bb1b3b57569c2a9e86346b388ba5e
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text a305d268b7ef3fbd1de87bd464ac8e2a
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Internal 9aaf446b91649c416d85a19f08d51f8e
98d691fdfb1e91b4012334f14a91a9d7
  $swhen1 ::
    Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
    -> ((), [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ eta1 :: Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties ->
                 (GHC.Tuple.(),
                  GHC.Types.[]
                    @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties)) -}
f0f3f56641ee4ce2a99fe6cb16728fc4
  adverb ::
    Data.Text.Internal.Text
    -> Arhelk.Core.Rule.Rule
         Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
  {- Arity: 1, Strictness: <L,U(U,U,U)>,
     Unfolding: (\ w :: Data.Text.Internal.Text ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                           (Control.Monad.Trans.Writer.Lazy.WriterT
                              [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                              Data.Functor.Identity.Identity)
                           ()
                   = case (Arhelk.Russian.Lemma.Common.endsWith1
                             w
                             Arhelk.Russian.Lemma.Adverb.adverb5)
                            `cast`
                          (Data.Monoid.NTCo:Any[0]) of wild {
                       GHC.Types.False
                       -> Arhelk.Russian.Lemma.Adverb.$swhen1
                            `cast`
                          (Trans
                               (<Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                ->_R Trans
                                         (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                                   <((),
                                                     [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R))
                                         (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                   <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                                   <Data.Functor.Identity.Identity>_R
                                                   <()>_N)))
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                         <Control.Monad.Trans.Writer.Lazy.WriterT
                                            [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                            Data.Functor.Identity.Identity>_R
                                         <()>_N)))
                       GHC.Types.True
                       -> Arhelk.Russian.Lemma.Adverb.adverb4
                            `cast`
                          (Trans
                               (<Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                ->_R Trans
                                         (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                                   <((),
                                                     [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R))
                                         (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                   <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                                   <Data.Functor.Identity.Identity>_R
                                                   <()>_N)))
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                         <Control.Monad.Trans.Writer.Lazy.WriterT
                                            [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                            Data.Functor.Identity.Identity>_R
                                         <()>_N))) }
                 } in
                 let {
                   k :: Control.Monad.Trans.Reader.ReaderT
                          Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                          (Control.Monad.Trans.Writer.Lazy.WriterT
                             [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                             Data.Functor.Identity.Identity)
                          ()
                   = case (Arhelk.Russian.Lemma.Common.endsWith1
                             w
                             Arhelk.Russian.Lemma.Adverb.adverb2)
                            `cast`
                          (Data.Monoid.NTCo:Any[0]) of wild {
                       GHC.Types.False
                       -> Arhelk.Russian.Lemma.Adverb.$swhen1
                            `cast`
                          (Trans
                               (<Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                ->_R Trans
                                         (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                                   <((),
                                                     [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R))
                                         (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                   <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                                   <Data.Functor.Identity.Identity>_R
                                                   <()>_N)))
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                         <Control.Monad.Trans.Writer.Lazy.WriterT
                                            [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                            Data.Functor.Identity.Identity>_R
                                         <()>_N)))
                       GHC.Types.True
                       -> Arhelk.Russian.Lemma.Adverb.adverb1
                            `cast`
                          (Trans
                               (<Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                ->_R Trans
                                         (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                                   <((),
                                                     [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R))
                                         (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                   <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                                   <Data.Functor.Identity.Identity>_R
                                                   <()>_N)))
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                         <Control.Monad.Trans.Writer.Lazy.WriterT
                                            [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                            Data.Functor.Identity.Identity>_R
                                         <()>_N))) }
                 } in
                 (\ eta :: Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties ->
                  let {
                    a4 :: Control.Monad.Trans.Writer.Lazy.WriterT
                            [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                            Data.Functor.Identity.Identity
                            ()
                    = k `cast`
                      (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                           <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                           <Control.Monad.Trans.Writer.Lazy.WriterT
                              [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                              Data.Functor.Identity.Identity>_R
                           <()>_N)
                        eta
                  } in
                  (case a4
                          `cast`
                        (Trans
                             (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                  <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <()>_N)
                             (Data.Functor.Identity.NTCo:Identity[0]
                                  <((),
                                    [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R)) of wild { (,) b1 w' ->
                   b1 },
                   case (m1
                           `cast`
                         (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                              <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                              <Control.Monad.Trans.Writer.Lazy.WriterT
                                 [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                 Data.Functor.Identity.Identity>_R
                              <()>_N)
                           eta)
                          `cast`
                        (Trans
                             (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                  <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <()>_N)
                             (Data.Functor.Identity.NTCo:Identity[0]
                                  <((),
                                    [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R)) of wild { (,) a5 w6 ->
                   GHC.Base.++
                     @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                     w6
                     (case a4
                             `cast`
                           (Trans
                                (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                     <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <()>_N)
                                (Data.Functor.Identity.NTCo:Identity[0]
                                     <((),
                                       [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R)) of wild1 { (,) b1 w' ->
                      w' }) })
                    `cast`
                  (Trans
                       (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                 <((), [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])>_R))
                       (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                 <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <()>_N))))
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                <Control.Monad.Trans.Writer.Lazy.WriterT
                                   [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]
                                   Data.Functor.Identity.Identity>_R
                                <()>_N))
                      (Sym (Arhelk.Core.Rule.NTCo:RuleM[0]
                                <Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties>_R
                                <[Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties]>_N) <()>_N))) -}
5091a7e46e58bfb179d7814a190f2346
  adverb1 ::
    Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
    -> ((), [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ w2 :: Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties ->
                 (GHC.Tuple.(),
                  GHC.Base.augment
                    @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                    (\ @ b
                       c :: Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                            -> b -> b[OneShot]
                       n :: b[OneShot] ->
                     n)
                    (GHC.Types.:
                       @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                       (case w2 of wild { Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties ds ->
                        Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                          (GHC.Base.Just
                             @ Arhelk.Russian.Lemma.Data.Adjective.AdjectiveDegree
                             Arhelk.Russian.Lemma.Data.Adjective.ComparitiveDegree) })
                       (GHC.Types.[]
                          @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties)))) -}
78203f21f8c4d3bdc9187c1e4c29de52
  adverb2 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Arhelk.Russian.Lemma.Adverb.adverb3
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
e200c18eb0d966fdc4e3cb4e10ffbf76
  adverb3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "\\208\\181"#) -}
3d52bdabd417a07095461fb658c0b517
  adverb4 ::
    Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
    -> ((), [Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ w2 :: Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties ->
                 (GHC.Tuple.(),
                  GHC.Base.augment
                    @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                    (\ @ b
                       c :: Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                            -> b -> b[OneShot]
                       n :: b[OneShot] ->
                     n)
                    (GHC.Types.:
                       @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                       (case w2 of wild { Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties ds ->
                        Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties
                          (GHC.Base.Just
                             @ Arhelk.Russian.Lemma.Data.Adjective.AdjectiveDegree
                             Arhelk.Russian.Lemma.Data.Adjective.PositiveDegree) })
                       (GHC.Types.[]
                          @ Arhelk.Russian.Lemma.Data.Adverb.AdverbProperties)))) -}
c650447562e73423eed8c203436fc5ac
  adverb5 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Arhelk.Russian.Lemma.Adverb.adverb6
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
30123c624d1ba7a38023705fa0494da0
  adverb6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "\\208\\190"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

