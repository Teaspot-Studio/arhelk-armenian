
==================== FINAL INTERFACE ====================
2015-11-03 17:00:01.141702 UTC

interface arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Data.Substantive 7102
  interface hash: 50176c874dd6f0224a24a14f21b87b62
  ABI hash: a743750566235cd8d39b888bc1c4cc51
  export-list hash: 59c06da26dacc33852214d7a7491faf9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0fec855f7cc196a33e836a863eef834f
  sig of: Nothing
  used TH splices: True
  where
exports:
  Arhelk.Russian.Lemma.Data.Substantive.substAnimacy
  Arhelk.Russian.Lemma.Data.Substantive.substAppellativity
  Arhelk.Russian.Lemma.Data.Substantive.substCase
  Arhelk.Russian.Lemma.Data.Substantive.substDeclension
  Arhelk.Russian.Lemma.Data.Substantive.substGender
  Arhelk.Russian.Lemma.Data.Substantive.substQuantity
  Arhelk.Russian.Lemma.Data.Substantive.Animacy{Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun}
  Arhelk.Russian.Lemma.Data.Substantive.Appellativity{Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun Arhelk.Russian.Lemma.Data.Substantive.ProperNoun}
  Arhelk.Russian.Lemma.Data.Substantive.Declension{Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension}
  Arhelk.Russian.Lemma.Data.Substantive.GrammarCase{Arhelk.Russian.Lemma.Data.Substantive.Ablativus Arhelk.Russian.Lemma.Data.Substantive.Accusativus Arhelk.Russian.Lemma.Data.Substantive.Dativus Arhelk.Russian.Lemma.Data.Substantive.Genitivus Arhelk.Russian.Lemma.Data.Substantive.Nominativus Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis}
  Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties{Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties Arhelk.Russian.Lemma.Data.Substantive._substAnimacy Arhelk.Russian.Lemma.Data.Substantive._substAppellativity Arhelk.Russian.Lemma.Data.Substantive._substCase Arhelk.Russian.Lemma.Data.Substantive._substDeclension Arhelk.Russian.Lemma.Data.Substantive._substGender Arhelk.Russian.Lemma.Data.Substantive._substQuantity}
module dependencies: Arhelk.Russian.Lemma.Data.Common
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 base-compat-0.8.2@basec_D4gHocz8sOX8PHzFB3nfQT
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      generic-deriving-1.8.0@gener_1Q2nStr4JSvHfQMGPOhz3e
                      ghc-prim-0.4.0.0 hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      integer-gmp-1.0.0.0
                      lens-family-th-0.4.1.0@lensf_1BXbC5Dg0C5GlgOx3ZVBtX
                      lens-family-core-1.2.0@lensf_41RJsMbLUP4I9prGLUphsy
                      lens-family-1.2.0@lensf_BcsUcH7SCv1L4ogXuYAwHp
                      lens-simple-0.1.0.8@lenss_3ClGSemuCIs1em35IPgh6B
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      template-haskell-2.10.0.0 text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      text-show-2@texts_6msSD0wSAlK5unkkd9ynxr
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Applicative
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Concurrent
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Exception
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Monad.ST
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Array
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Bool
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.ByteString
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Char
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Complex
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Data
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Dynamic
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Either
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Fixed
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Floating
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Functor.Identity
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Integral
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.List
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Maybe
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Monoid
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ord
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Proxy
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ratio
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Text
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Tuple
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Coercion
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Equality
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Typeable
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Version
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Void
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.C.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.Ptr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Event
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Fingerprint
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Generics
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.RTS.Flags
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.StaticPtr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Stats
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.TypeLits
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Numeric.Natural
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Exit
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.IO
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Posix.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Text.Read
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics base-4.8.1.0:GHC.TypeLits
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  Arhelk.Russian.Lemma.Data.Common 572ccaef9e9d8d26928e2e83c1169210
  exports: 42b3be9622fc380d2fd7eeaf966bbf01
  GrammarGender 2f9551aa939c5575e30199a6f9a99ca2
  GrammarQuantity 3177ab9cc5c15dd29ff88742507e5168
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.Monoid bd73caba6e77f9944cb89ef5bec300c6
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Enum d0db4d619cd8916cc7a23444816222af
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  lens-family-th-0.4.1.0@lensf_1BXbC5Dg0C5GlgOx3ZVBtX:Lens.Family2.TH 7cc9ba1c82f1aa0ef8b5e3d05747f5ba
import  -/  lens-simple-0.1.0.8@lenss_3ClGSemuCIs1em35IPgh6B:Lens.Simple 0415aae47fc565920c4518de36a394c8
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow f98816fc41e1809d42ba206af16c7297
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes 2c021982bdb0927c661f3d4c9188a464
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Utils c7b192e03bc8b48d2b27d4f2a73e0aa2
6db669a4594fb36ac5edb749c903cd67
  $fBoundedAnimacy ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Substantive.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                  Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                  Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -}
d3361fcc7c84af75fba91f9e3490d53a
  $fBoundedAppellativity ::
    GHC.Enum.Bounded
      Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                  Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                  Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -}
a7f16afbe9455a0120cf0b2974a927fc
  $fBoundedDeclension ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Substantive.Declension
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                  Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                  Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -}
5ad720d8ab1fde037d8278bc596d70cb
  $fBoundedGrammarCase ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                  Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Substantive.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$csucc
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$cpred
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$cenumFromThenTo -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 1, Strictness: <L,U>b -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy2 :: [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_go2
                   1) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy3 :: [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_go3
                   0) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy4 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Strictness: b -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy5 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Strictness: b -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy3
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy2 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -> $j1 1 }
                 } in
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -> $j 1 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   x2 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -> $j1 1 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -> $j 1 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy }
                       Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Substantive.Animacy } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -> $j 1 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> GHC.Types.I# 1 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$cpred ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy4
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$csucc ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy5 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$ctoEnum ww1 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.Animacy] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   (Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy_$ctoEnum x)
                   ys) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
    -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.Animacy] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   (case x of wild { GHC.Types.I# a18 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                      a18 })
                   ys) -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_go ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 1, Strictness: <L,U> -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_go1 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 1, Strictness: <L,U> -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_go2 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
6db669a4594fb36ac5edb749c903cd67
  $fEnumAnimacy_go3 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$csucc
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$cpred
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$cenumFromThenTo -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity1 ::
    GHC.Prim.Int#
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 1, Strictness: <L,U>b -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity2 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_go2
                   1) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity3 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_go3
                   0) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity4 ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Strictness: b -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity5 ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Strictness: b -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity3
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity2 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_c1
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_c1
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> $j1 1 }
                 } in
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> $j 1 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   x2 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> $j1 1 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> $j 1 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity }
                       Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_go x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> $j 1 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> GHC.Types.I# 1 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$cpred ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity4
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$csucc ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity5 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_$ctoEnum ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$ctoEnum1 ww1 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.Appellativity] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   (Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity_$ctoEnum
                      x)
                   ys) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.Appellativity] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   (case x of wild { GHC.Types.I# a18 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                      a18 })
                   ys) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_go ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 1, Strictness: <L,U> -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_go1 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 1, Strictness: <L,U> -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_go2 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEnumAppellativity_go3 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Substantive.Declension
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$csucc
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$cpred
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$cenumFromThenTo -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 1, Strictness: <L,U>b -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension2 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_go3
                   2) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension3 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_go4
                   1) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension4 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_go5
                   0) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension5 ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Strictness: b -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension6 ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Strictness: b -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension4
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension3
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension2 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c1
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c1
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 2 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension -> $j1 1
                       Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -> $j1 2 }
                 } in
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension -> $j 1
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -> $j 2 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   x2 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                     x4
                                     x5
                                     1 }
                           Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                     x4
                                     x5
                                     2
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                                     Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                                     x4
                                     x5
                                     2 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension -> $j1 1
                       Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -> $j1 2 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension -> $j 1
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -> $j 2 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_go2 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.Declension }
                       Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.Declension }
                       Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_go x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.Declension } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension -> $j 1
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -> $j 2 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> GHC.Types.I# 1
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> GHC.Types.I# 2 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$cpred ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension5
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$csucc ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension6 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$ctoEnum2 ww1 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.Declension] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                   (Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension_$ctoEnum x)
                   ys) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
    -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.Declension] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                   (case x of wild { GHC.Types.I# a18 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                      a18 })
                   ys) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_go ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, Strictness: <L,U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_go1 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, Strictness: <L,U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_go2 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, Strictness: <L,U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_go3 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_go4 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEnumDeclension_go5 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$csucc
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$cpred
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_$cenumFromThenTo -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase1 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go6
                   5) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase2 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go7
                   4) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase3 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go8
                   3) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase4 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go9
                   2) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase5 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go10
                   1) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase6 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go11
                   0) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase7 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 1, Strictness: <L,U>b -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase8 ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Strictness: b -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase9 ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Strictness: b -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase6
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase5
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase4
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase3
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase2
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase1 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_c
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
                                    Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_c
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 5 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> $j1 0
                       Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> $j1 1
                       Arhelk.Russian.Lemma.Data.Substantive.Dativus -> $j1 2
                       Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> $j1 3
                       Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> $j1 4
                       Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis -> $j1 5 }
                 } in
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> $j 1
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus -> $j 2
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> $j 3
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> $j 4
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> $j 5 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   y :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go5 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase }
                       Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go4 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase }
                       Arhelk.Russian.Lemma.Data.Substantive.Dativus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go3 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase }
                       Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go2 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase }
                       Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase }
                       Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 5) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase_go x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> $j 0
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> $j 1
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus -> $j 2
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> $j 3
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> $j 4
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> $j 5 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case w of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.I# 1
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.I# 2
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.I# 3
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.I# 4
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> GHC.Types.I# 5 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$cpred ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase8
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$csucc ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase9 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$ctoEnum3 ww1 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   (case x of wild { GHC.Types.I# a18 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                      a18 })
                   ys) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go1 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go10 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go11 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go2 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go3 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go4 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go5 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go6 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go7 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go8 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEnumGrammarCase_go9 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
6db669a4594fb36ac5edb749c903cd67
  $fEqAnimacy ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Substantive.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqAnimacy_$c==
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqAnimacy_$c/= -}
6db669a4594fb36ac5edb749c903cd67
  $fEqAnimacy_$c/= ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.False } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fEqAnimacy_$c== ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   ds1 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.True } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEqAppellativity ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqAppellativity_$c==
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqAppellativity_$c/= -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEqAppellativity_$c/= ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.False } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fEqAppellativity_$c== ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   ds1 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.True } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEqDeclension ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Substantive.Declension
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqDeclension_$c==
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqDeclension_$c/= -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEqDeclension_$c/= ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.False } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fEqDeclension_$c== ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   ds1 :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.True } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEqGrammarCase ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqGrammarCase_$c==
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqGrammarCase_$c/= -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEqGrammarCase_$c/= ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fEqGrammarCase_$c== ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   ds1 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True } }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fEqSubstantiveProperties ::
    GHC.Classes.Eq
      Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqSubstantiveProperties_$c==
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqSubstantiveProperties_$c/= -}
6317a75e6403756fdec7b4a5e534b4e8
  $fEqSubstantiveProperties_$c/= ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   b :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case Arhelk.Russian.Lemma.Data.Substantive.$fEqSubstantiveProperties_$c==
                        a18
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fEqSubstantiveProperties_$c== ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   w1 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case w of ww { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13 } }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fMonoidSubstantiveProperties ::
    GHC.Base.Monoid
      Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                  Arhelk.Russian.Lemma.Data.Substantive.$fMonoidSubstantiveProperties_$cmempty
                  Arhelk.Russian.Lemma.Data.Substantive.$fMonoidSubstantiveProperties_$cmappend
                  Arhelk.Russian.Lemma.Data.Substantive.$fMonoidSubstantiveProperties_$cmconcat -}
6317a75e6403756fdec7b4a5e534b4e8
  $fMonoidSubstantiveProperties_$cmappend ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   w1 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case Arhelk.Russian.Lemma.Data.Substantive.$w$cmappend
                        w
                        w1 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fMonoidSubstantiveProperties_$cmconcat ::
    [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties] ->
                 case Arhelk.Russian.Lemma.Data.Substantive.$wgo
                        w of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fMonoidSubstantiveProperties_$cmempty ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (GHC.Base.Nothing
                      @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                   (GHC.Base.Nothing
                      @ Arhelk.Russian.Lemma.Data.Substantive.Declension)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Common.GrammarGender)
                   (GHC.Base.Nothing
                      @ Arhelk.Russian.Lemma.Data.Common.GrammarQuantity)
                   (GHC.Base.Nothing
                      @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase)) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Substantive.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqAnimacy
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$ccompare
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$c<
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$c<=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$c>
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$c>=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$cmax
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy_$cmin -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$c< ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$c<= ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.True } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$c> ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.False } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$c>= ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$ccompare ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                        -> GHC.Types.EQ } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$cmax ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun -> y
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fOrdAnimacy_$cmin ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun }
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun -> y }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqAppellativity
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$ccompare
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$c<
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$c<=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$c>
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$c>=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$cmax
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity_$cmin -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$c< ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$c<= ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.True } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$c> ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.False } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$c>= ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$ccompare ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                        -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                        -> GHC.Types.EQ } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$cmax ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun -> y
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.ProperNoun } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fOrdAppellativity_$cmin ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun }
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun -> y }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Substantive.Declension
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqDeclension
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$ccompare
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$c<
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$c<=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$c>
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$c>=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$cmax
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension_$cmin -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$c< ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$c<= ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.True } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$c> ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.False } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$c>= ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$ccompare ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   b :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> GHC.Types.EQ } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$cmax ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension -> y
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fOrdDeclension_$cmin ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   y :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension }
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> case y of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        -> Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                        Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        -> Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                        Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                        -> Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension }
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension -> y }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.$fEqGrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$ccompare
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$c<
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$c<=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$c>
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$c>=
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$cmax
                  Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase_$cmin -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$c< ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$c<= ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.True } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$c> ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$c>= ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$ccompare ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a18 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   b :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case a18 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> GHC.Types.EQ } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$cmax ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   y :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus -> y
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fOrdGrammarCase_$cmin ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   y :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Substantive.Nominativus }
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> case y of wild1 {
                        Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                        Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Genitivus }
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Dativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Dativus }
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Accusativus }
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                        Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                        -> Arhelk.Russian.Lemma.Data.Substantive.Ablativus }
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis -> y }) -}
6db669a4594fb36ac5edb749c903cd67
  $fShowAnimacy ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Substantive.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy_$cshow
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy_$cshowList -}
6db669a4594fb36ac5edb749c903cd67
  $fShowAnimacy1 ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy3)
                        eta
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy2)
                        eta }) -}
69d86a73b1d363f3c4c94bd843ef7cb0
  $fShowAnimacy2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InanimateNoun"#) -}
7ccaf179e139420e0329492902840fac
  $fShowAnimacy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AnimateNoun"#) -}
6db669a4594fb36ac5edb749c903cd67
  $fShowAnimacy_$cshow ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy3
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy2 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fShowAnimacy_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Substantive.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy1) -}
6db669a4594fb36ac5edb749c903cd67
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AnimateNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy3)
                        eta
                   Arhelk.Russian.Lemma.Data.Substantive.InanimateNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy2)
                        eta }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fShowAppellativity ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity_$cshow
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity_$cshowList -}
d3361fcc7c84af75fba91f9e3490d53a
  $fShowAppellativity1 ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity3)
                        eta
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity2)
                        eta }) -}
e0042f20bccea732ebfb23ba0edce591
  $fShowAppellativity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ProperNoun"#) -}
87b0a7cc0f07a448ea521ff4666b74e0
  $fShowAppellativity3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AppellativeNoun"#) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fShowAppellativity_$cshow ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity3
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity2 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fShowAppellativity_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity1) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fShowAppellativity_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.AppellativeNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity3)
                        eta
                   Arhelk.Russian.Lemma.Data.Substantive.ProperNoun
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity2)
                        eta }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fShowDeclension ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Substantive.Declension
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension_$cshow
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension_$cshowList -}
e01f677b2f7690d726f56e27cd3f4342
  $fShowDeclension1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ThirdDeclension"#) -}
156409d5010bb2cd8ebc8733b42313a3
  $fShowDeclension2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SecondDeclension"#) -}
56d47f00fbfe88ef8985e138121cc4f0
  $fShowDeclension3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FirstDeclension"#) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fShowDeclension_$cshow ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension3
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension2
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension1 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fShowDeclension_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Substantive.Declension]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                   Arhelk.Russian.Lemma.Data.Substantive.$w$cshowsPrec) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fShowDeclension_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   w2 :: GHC.Base.String ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$cshowsPrec w1 w2) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fShowGrammarCase ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase_$cshow
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase_$cshowList -}
15cd9ffa5008f6c3f7ce9798886937ab
  $fShowGrammarCase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Praepositionalis"#) -}
88a769fa3611e3d04291567c9a33e051
  $fShowGrammarCase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ablativus"#) -}
038c8df7c526a7638a013038ad4521ef
  $fShowGrammarCase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Accusativus"#) -}
e117e5fcd68afad1e0e0e6d519740bc0
  $fShowGrammarCase4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Dativus"#) -}
b100eb2c987491cab9533a535b57d84e
  $fShowGrammarCase5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Genitivus"#) -}
003ac88a46cf891b7142946b8d69f39f
  $fShowGrammarCase6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nominativus"#) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fShowGrammarCase_$cshow ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fShowGrammarCase_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   Arhelk.Russian.Lemma.Data.Substantive.$w$cshowsPrec1) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fShowGrammarCase_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   w2 :: GHC.Base.String ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$cshowsPrec1 w1 w2) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fShowSubstantiveProperties ::
    GHC.Show.Show
      Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowSubstantiveProperties_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowSubstantiveProperties_$cshow
                  Arhelk.Russian.Lemma.Data.Substantive.$fShowSubstantiveProperties_$cshowList -}
6317a75e6403756fdec7b4a5e534b4e8
  $fShowSubstantiveProperties1 ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case w of ww { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$cshowsPrec2
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fShowSubstantiveProperties_$cshow ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 Arhelk.Russian.Lemma.Data.Substantive.$fShowSubstantiveProperties_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fShowSubstantiveProperties_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   Arhelk.Russian.Lemma.Data.Substantive.$fShowSubstantiveProperties1) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fShowSubstantiveProperties_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 } }) -}
6db669a4594fb36ac5edb749c903cd67
  $fTextShowAnimacy ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Substantive.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy_$cshowb
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy_$cshowbList -}
6db669a4594fb36ac5edb749c903cd67
  $fTextShowAnimacy1 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
6db669a4594fb36ac5edb749c903cd67
  $fTextShowAnimacy2 ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
6db669a4594fb36ac5edb749c903cd67
  $fTextShowAnimacy_$cshowb ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Substantive.Animacy>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
6db669a4594fb36ac5edb749c903cd67
  $fTextShowAnimacy_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Substantive.Animacy]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
6db669a4594fb36ac5edb749c903cd67
  $fTextShowAnimacy_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Substantive.Animacy>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fTextShowAppellativity ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity_$cshowb
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity_$cshowbList -}
d3361fcc7c84af75fba91f9e3490d53a
  $fTextShowAppellativity1 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
d3361fcc7c84af75fba91f9e3490d53a
  $fTextShowAppellativity2 ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa1
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fTextShowAppellativity_$cshowb ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Substantive.Appellativity>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fTextShowAppellativity_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Substantive.Appellativity]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
d3361fcc7c84af75fba91f9e3490d53a
  $fTextShowAppellativity_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Substantive.Appellativity>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fTextShowDeclension ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Substantive.Declension
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension_$cshowb
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension_$cshowbList -}
a7f16afbe9455a0120cf0b2974a927fc
  $fTextShowDeclension1 ::
    [Arhelk.Russian.Lemma.Data.Substantive.Declension]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
a7f16afbe9455a0120cf0b2974a927fc
  $fTextShowDeclension2 ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa2
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fTextShowDeclension_$cshowb ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Substantive.Declension>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fTextShowDeclension_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Substantive.Declension]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Substantive.Declension]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
a7f16afbe9455a0120cf0b2974a927fc
  $fTextShowDeclension_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Substantive.Declension>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fTextShowGrammarCase ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase_$cshowb
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase_$cshowbList -}
5ad720d8ab1fde037d8278bc596d70cb
  $fTextShowGrammarCase1 ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
5ad720d8ab1fde037d8278bc596d70cb
  $fTextShowGrammarCase2 ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa3
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fTextShowGrammarCase_$cshowb ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Substantive.GrammarCase>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fTextShowGrammarCase_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
5ad720d8ab1fde037d8278bc596d70cb
  $fTextShowGrammarCase_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Substantive.GrammarCase>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fTextShowSubstantiveProperties ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_$cshowbPrec
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_$cshowb
                  Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_$cshowbList -}
99784e0deaf74c3eeb95f176e7bb3280
  $fTextShowSubstantiveProperties1 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa4
                   @ s
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
0cb68799470670b31262d09d28297266
  $fTextShowSubstantiveProperties2 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa5
                   @ s
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
b3cd9fc6ba5ba3107900841606b096b3
  $fTextShowSubstantiveProperties3 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa6
                   @ s
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
5bf236cd08e2eb7a00fd22c3c4e02f4d
  $fTextShowSubstantiveProperties4 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa7
                   @ s
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
2afc63be92a76ac081feba13d36d5603
  $fTextShowSubstantiveProperties5 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa8
                   @ s
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
5edeebcc799e9c45600f4def016b80c2
  $fTextShowSubstantiveProperties6 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$wa9
                   @ s
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   w2 }) -}
e4678db951afbd4ded8e953256c8c4b0
  $fTextShowSubstantiveProperties7 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3,
     Unfolding: (\ @ s
                   k :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ds1 :: Data.Text.Internal.Builder.Buffer s
                   eta :: GHC.Prim.State# s[OneShot] ->
                 case ds1 of wild1 { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww :: GHC.Prim.MutableByteArray# s
                       ww1 :: GHC.Prim.Int#
                       ww2 :: GHC.Prim.Int#
                       ww3 :: GHC.Prim.Int#
                       w :: [GHC.Types.Char]
                       w1 :: GHC.Prim.State# s[OneShot] ->
                     case w of wild2 {
                       []
                       -> (k (Data.Text.Internal.Builder.Buffer @ s ww ww1 ww2 ww3))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w1
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww3 1) of wild3 {
                            GHC.Types.False
                            -> case ipv4 of wild4 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild5 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w1 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww
                                      ww1
                                      (GHC.Prim.+# ww2 2)
                                      (GHC.Prim.-# ww3 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww
                                           (GHC.Prim.+# ww1 ww2)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w1 of s2# { DEFAULT ->
                                    $wa24
                                      ww
                                      ww1
                                      (GHC.Prim.+# ww2 1)
                                      (GHC.Prim.-# ww3 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w1 of ds4 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww1
                                       ww2)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild2
                                            ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24
                   dt
                   dt1
                   dt2
                   dt3
                   Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_str
                   eta }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fTextShowSubstantiveProperties_$cshowb ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case w of ww { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Arhelk.Russian.Lemma.Data.Substantive.$w$cshowb
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fTextShowSubstantiveProperties_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta :: [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties] ->
                 case eta of wild {
                   []
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties7
                        `cast`
                      (Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                   : x xs
                   -> let {
                        ds :: Data.Text.Internal.Builder.Builder
                        = case x of ww { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ww1 ww2 ww3 ww4 ww5 ww6 ->
                          Arhelk.Russian.Lemma.Data.Substantive.$w$cshowb
                            ww1
                            ww2
                            ww3
                            ww4
                            ww5
                            ww6 }
                      } in
                      let {
                        ds1 :: Data.Text.Internal.Builder.Builder
                        = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_go
                            xs
                      } in
                      (\ @ s
                         eta1 :: Data.Text.Internal.Builder.Buffer s
                                 -> GHC.ST.ST s [Data.Text.Internal.Text] ->
                       let {
                         eta2 :: Data.Text.Internal.Builder.Buffer s
                                 -> GHC.ST.ST s [Data.Text.Internal.Text]
                         = ds `cast` (Data.Text.Internal.Builder.NTCo:Builder[0])
                             @ s
                             (ds1 `cast` (Data.Text.Internal.Builder.NTCo:Builder[0]) @ s eta1)
                       } in
                       \ eta3 :: Data.Text.Internal.Builder.Buffer s
                         eta4 :: GHC.Prim.State# s[OneShot] ->
                       case eta3 of wild1 { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# 2 dt3) of wild2 {
                         GHC.Types.False
                         -> case dt2 of wild3 {
                              DEFAULT
                              -> (# eta4,
                                    GHC.Types.:
                                      @ Data.Text.Internal.Text
                                      (Data.Text.Internal.Text
                                         dt
                                           `cast`
                                         (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                s) GHC.Prim.ByteArray#)
                                         dt1
                                         wild3)
                                      (case GHC.Prim.newByteArray#
                                              @ s
                                              224
                                              eta4 of ds2 { (#,#) ipv1 ipv2 ->
                                       case GHC.Prim.writeWord16Array#
                                              @ s
                                              ipv2
                                              0
                                              __word 91
                                              ipv1 of s2# { DEFAULT ->
                                       case (eta2
                                               (Data.Text.Internal.Builder.Buffer @ s ipv2 0 1 111))
                                              `cast`
                                            (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                                              s2# of ds3 { (#,#) ipv4 ipv5 ->
                                       ipv5 } } }) #)
                              0
                              -> case GHC.Prim.newByteArray#
                                        @ s
                                        224
                                        eta4 of ds2 { (#,#) ipv1 ipv2 ->
                                 case GHC.Prim.writeWord16Array#
                                        @ s
                                        ipv2
                                        0
                                        __word 91
                                        ipv1 of s2# { DEFAULT ->
                                 (eta2 (Data.Text.Internal.Builder.Buffer @ s ipv2 0 1 111))
                                   `cast`
                                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                                   s2# } } }
                         GHC.Types.True
                         -> case GHC.Prim.writeWord16Array#
                                   @ s
                                   dt
                                   (GHC.Prim.+# dt1 dt2)
                                   __word 91
                                   eta4 of s2# { DEFAULT ->
                            (eta2
                               (Data.Text.Internal.Builder.Buffer
                                  @ s
                                  dt
                                  dt1
                                  (GHC.Prim.+# dt2 1)
                                  (GHC.Prim.-# dt3 1)))
                              `cast`
                            (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                              s2# } } })
                        `cast`
                      (Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) }) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fTextShowSubstantiveProperties_$cshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties_$cshowb
                   eta) -}
6317a75e6403756fdec7b4a5e534b4e8
  $fTextShowSubstantiveProperties_go ::
    [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U> -}
bed16b602a6ebd03be46c2ed1e8642e8
  $fTextShowSubstantiveProperties_str :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "[]"#) -}
d2cf0779efae3faa5a575e57da69a414
  $w$c== ::
    GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Base.Maybe
         Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
6317a75e6403756fdec7b4a5e534b4e8
  $w$cmappend ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> (# GHC.Base.Maybe
            Arhelk.Russian.Lemma.Data.Substantive.Appellativity,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   w1 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 (# case w of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    case ds of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds6 ds7 ds8 ds9 ds10 ds11 ->
                         ds6 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    case ds1 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds6 ds7 ds8 ds9 ds10 ds11 ->
                         ds7 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    case ds2 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds6 ds7 ds8 ds9 ds10 ds11 ->
                         ds8 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    case ds3 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds6 ds7 ds8 ds9 ds10 ds11 ->
                         ds9 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    case ds4 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds6 ds7 ds8 ds9 ds10 ds11 ->
                         ds10 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    case ds5 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds6 ds7 ds8 ds9 ds10 ds11 ->
                         ds11 }
                      GHC.Base.Just ipv -> wild1 } } #)) -}
28afefb722add9d5c1cd527499622d2a
  $w$cshowb ::
    GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 6,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                   ww1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
                   ww2 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Substantive.Declension
                   ww3 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Common.GrammarGender
                   ww4 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
                   ww5 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                 TextShow.Utils.unwordsB
                   (GHC.Types.:
                      @ Data.Text.Internal.Builder.Builder
                      (case ww of wild {
                         GHC.Base.Nothing
                         -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties6
                              `cast`
                            (Trans
                                 (forall s.
                                  <Data.Text.Internal.Builder.Buffer s
                                   -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                  ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                  ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                                 (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                         GHC.Base.Just x
                         -> (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity2
                               x)
                              `cast`
                            (Trans
                                 (forall s.
                                  <Data.Text.Internal.Builder.Buffer s
                                   -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                  ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                  ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                                 (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                      (GHC.Types.:
                         @ Data.Text.Internal.Builder.Builder
                         (case ww1 of wild {
                            GHC.Base.Nothing
                            -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties5
                                 `cast`
                               (Trans
                                    (forall s.
                                     <Data.Text.Internal.Builder.Buffer s
                                      -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                     ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                     ->_R Sym (GHC.ST.NTCo:ST[0]
                                                   <s>_N <[Data.Text.Internal.Text]>_R))
                                    (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                            GHC.Base.Just x
                            -> (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy2 x)
                                 `cast`
                               (Trans
                                    (forall s.
                                     <Data.Text.Internal.Builder.Buffer s
                                      -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                     ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                     ->_R Sym (GHC.ST.NTCo:ST[0]
                                                   <s>_N <[Data.Text.Internal.Text]>_R))
                                    (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                         (GHC.Types.:
                            @ Data.Text.Internal.Builder.Builder
                            (case ww2 of wild {
                               GHC.Base.Nothing
                               -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties4
                                    `cast`
                                  (Trans
                                       (forall s.
                                        <Data.Text.Internal.Builder.Buffer s
                                         -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                        ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                        ->_R Sym (GHC.ST.NTCo:ST[0]
                                                      <s>_N <[Data.Text.Internal.Text]>_R))
                                       (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                               GHC.Base.Just x
                               -> (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension2 x)
                                    `cast`
                                  (Trans
                                       (forall s.
                                        <Data.Text.Internal.Builder.Buffer s
                                         -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                        ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                        ->_R Sym (GHC.ST.NTCo:ST[0]
                                                      <s>_N <[Data.Text.Internal.Text]>_R))
                                       (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                            (GHC.Types.:
                               @ Data.Text.Internal.Builder.Builder
                               (case ww3 of wild {
                                  GHC.Base.Nothing
                                  -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties3
                                       `cast`
                                     (Trans
                                          (forall s.
                                           <Data.Text.Internal.Builder.Buffer s
                                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                           ->_R Sym (GHC.ST.NTCo:ST[0]
                                                         <s>_N <[Data.Text.Internal.Text]>_R))
                                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                  GHC.Base.Just x
                                  -> (Arhelk.Russian.Lemma.Data.Common.$fTextShowGrammarGender2 x)
                                       `cast`
                                     (Trans
                                          (forall s.
                                           <Data.Text.Internal.Builder.Buffer s
                                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                           ->_R Sym (GHC.ST.NTCo:ST[0]
                                                         <s>_N <[Data.Text.Internal.Text]>_R))
                                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                               (GHC.Types.:
                                  @ Data.Text.Internal.Builder.Builder
                                  (case ww4 of wild {
                                     GHC.Base.Nothing
                                     -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties2
                                          `cast`
                                        (Trans
                                             (forall s.
                                              <Data.Text.Internal.Builder.Buffer s
                                               -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                              ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                              ->_R Sym (GHC.ST.NTCo:ST[0]
                                                            <s>_N <[Data.Text.Internal.Text]>_R))
                                             (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                     GHC.Base.Just x
                                     -> (Arhelk.Russian.Lemma.Data.Common.$fTextShowGrammarQuantity2
                                           x)
                                          `cast`
                                        (Trans
                                             (forall s.
                                              <Data.Text.Internal.Builder.Buffer s
                                               -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                              ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                              ->_R Sym (GHC.ST.NTCo:ST[0]
                                                            <s>_N <[Data.Text.Internal.Text]>_R))
                                             (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                                  (GHC.Types.:
                                     @ Data.Text.Internal.Builder.Builder
                                     (case ww5 of wild {
                                        GHC.Base.Nothing
                                        -> Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties1
                                             `cast`
                                           (Trans
                                                (forall s.
                                                 <Data.Text.Internal.Builder.Buffer s
                                                  -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                 ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                 ->_R Sym (GHC.ST.NTCo:ST[0]
                                                               <s>_N <[Data.Text.Internal.Text]>_R))
                                                (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                        GHC.Base.Just x
                                        -> (Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase2
                                              x)
                                             `cast`
                                           (Trans
                                                (forall s.
                                                 <Data.Text.Internal.Builder.Buffer s
                                                  -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                 ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                 ->_R Sym (GHC.ST.NTCo:ST[0]
                                                               <s>_N <[Data.Text.Internal.Text]>_R))
                                                (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                                     (GHC.Types.[] @ Data.Text.Internal.Builder.Builder)))))))) -}
a7f16afbe9455a0120cf0b2974a927fc
  $w$cshowsPrec ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Substantive.Declension
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.FirstDeclension
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension3
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.SecondDeclension
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension2
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.ThirdDeclension
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension1
                        w1 }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $w$cshowsPrec1 ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Arhelk.Russian.Lemma.Data.Substantive.Nominativus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase6
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.Genitivus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase5
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.Dativus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase4
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.Accusativus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase3
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.Ablativus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase2
                        w1
                   Arhelk.Russian.Lemma.Data.Substantive.Praepositionalis
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase1
                        w1 }) -}
9c8df0cd87928c2cc5655b63993f9c40
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe
         Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
6db669a4594fb36ac5edb749c903cd67
  $w$ctoEnum ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Substantive.Animacy
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                             ww } }) -}
d3361fcc7c84af75fba91f9e3490d53a
  $w$ctoEnum1 ::
    GHC.Prim.Int#
    -> Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                             ww } }) -}
a7f16afbe9455a0120cf0b2974a927fc
  $w$ctoEnum2 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Substantive.Declension
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 2) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                             ww } }) -}
5ad720d8ab1fde037d8278bc596d70cb
  $w$ctoEnum3 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase7 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 5) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase7 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                             ww } }) -}
6db669a4594fb36ac5edb749c903cd67
  $wa ::
    Arhelk.Russian.Lemma.Data.Substantive.Animacy
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d3361fcc7c84af75fba91f9e3490d53a
  $wa1 ::
    Arhelk.Russian.Lemma.Data.Substantive.Appellativity
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
a7f16afbe9455a0120cf0b2974a927fc
  $wa2 ::
    Arhelk.Russian.Lemma.Data.Substantive.Declension
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
5ad720d8ab1fde037d8278bc596d70cb
  $wa3 ::
    Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
4a29c35f9dc1085c0710a5bec582a6e3
  $wa4 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
40d75099da1da294a2beae328af800e1
  $wa5 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
2339e80e450fcb24aa2a9522f3ff1598
  $wa6 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
6d9bf25af7b3ef30ac03ed0f5702db08
  $wa7 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
402fcc348a1dd4df310ae38bf6be54c3
  $wa8 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
2a62577bbbca74edf170c3963b5b2bb6
  $wa9 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa24 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa24
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa24
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa24 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
6317a75e6403756fdec7b4a5e534b4e8
  $wgo ::
    [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
    -> (# GHC.Base.Maybe
            Arhelk.Russian.Lemma.Data.Substantive.Appellativity,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
6db669a4594fb36ac5edb749c903cd67
  data Animacy = AnimateNoun | InanimateNoun
    Promotable
d3361fcc7c84af75fba91f9e3490d53a
  data Appellativity = AppellativeNoun | ProperNoun
    Promotable
a7f16afbe9455a0120cf0b2974a927fc
  data Declension
    = FirstDeclension | SecondDeclension | ThirdDeclension
    Promotable
5ad720d8ab1fde037d8278bc596d70cb
  data GrammarCase
    = Nominativus
    | Genitivus
    | Dativus
    | Accusativus
    | Ablativus
    | Praepositionalis
    Promotable
6317a75e6403756fdec7b4a5e534b4e8
  data SubstantiveProperties
    = SubstantiveProperties {_substAppellativity :: GHC.Base.Maybe
                                                      Arhelk.Russian.Lemma.Data.Substantive.Appellativity,
                             _substAnimacy :: GHC.Base.Maybe
                                                Arhelk.Russian.Lemma.Data.Substantive.Animacy,
                             _substDeclension :: GHC.Base.Maybe
                                                   Arhelk.Russian.Lemma.Data.Substantive.Declension,
                             _substGender :: GHC.Base.Maybe
                                               Arhelk.Russian.Lemma.Data.Common.GrammarGender,
                             _substQuantity :: GHC.Base.Maybe
                                                 Arhelk.Russian.Lemma.Data.Common.GrammarQuantity,
                             _substCase :: GHC.Base.Maybe
                                             Arhelk.Russian.Lemma.Data.Substantive.GrammarCase}
    Promotable
6edbc35dcc6c6cb99a0ef8c6548bd4ec
  _substAnimacy ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
  RecSel Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
bf7261601cff8b0a583afd66a270d6b9
  _substAppellativity ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.Maybe
         Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  RecSel Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
d0c8081ed01159636db9f19dd5a43368
  _substCase ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  RecSel Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
4428ca6ec30913721eb49ef81250d575
  _substDeclension ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension
  RecSel Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
bab8ad4e558ba02920fbeddc310726a1
  _substGender ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
  RecSel Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
dc6000831db389b04a61f689d6b825dd
  _substQuantity ::
    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
  RecSel Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
a011d0c4d8938e6f014a428a3f11f295
  substAnimacy ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Substantive.Animacy))
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> f Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,1*U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy
                         -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                   a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Animacy)
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Substantive.Animacy ->
                    case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                      ds
                      x
                      ds2
                      ds3
                      ds4
                      ds5 })
                   (f1
                      (case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                       ds1 }))) -}
cc7ab02e93092e202926ab198e644c54
  substAppellativity ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Appellativity
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Substantive.Appellativity))
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> f Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(1*U,U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                   a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe
                        Arhelk.Russian.Lemma.Data.Substantive.Appellativity)
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Substantive.Appellativity ->
                    case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                      x
                      ds1
                      ds2
                      ds3
                      ds4
                      ds5 })
                   (f1
                      (case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                       ds }))) -}
3d10e48e513c55266d36e24ad1625d9e
  substCase ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Substantive.GrammarCase))
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> f Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,U,1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Substantive.GrammarCase)
                   a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe
                        Arhelk.Russian.Lemma.Data.Substantive.GrammarCase)
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Substantive.GrammarCase ->
                    case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                      ds
                      ds1
                      ds2
                      ds3
                      ds4
                      x })
                   (f1
                      (case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                       ds5 }))) -}
f8f15536b0b982a3faf808818da35f84
  substDeclension ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Substantive.Declension))
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> f Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,1*U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Substantive.Declension
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Substantive.Declension)
                   a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Substantive.Declension)
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Substantive.Declension ->
                    case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                      ds
                      ds1
                      x
                      ds3
                      ds4
                      ds5 })
                   (f1
                      (case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                       ds2 }))) -}
88541f4a50c008db22d09c8469de13b4
  substGender ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Common.GrammarGender))
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> f Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,1*U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Common.GrammarGender)
                   a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender)
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Common.GrammarGender ->
                    case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                      ds
                      ds1
                      ds2
                      x
                      ds4
                      ds5 })
                   (f1
                      (case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                       ds3 }))) -}
8bfb339111ebe53e01790864d7d9c1be
  substQuantity ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Common.GrammarQuantity))
    -> Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
    -> f Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Common.GrammarQuantity)
                   a18 :: Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity)
                   @ Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Common.GrammarQuantity ->
                    case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                    Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties
                      ds
                      ds1
                      ds2
                      ds3
                      x
                      ds5 })
                   (f1
                      (case a18 of wild { Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties ds ds1 ds2 ds3 ds4 ds5 ->
                       ds4 }))) -}
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  = Arhelk.Russian.Lemma.Data.Substantive.$fBoundedAnimacy
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  = Arhelk.Russian.Lemma.Data.Substantive.$fBoundedAppellativity
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  = Arhelk.Russian.Lemma.Data.Substantive.$fBoundedDeclension
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  = Arhelk.Russian.Lemma.Data.Substantive.$fBoundedGrammarCase
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEnumAnimacy
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEnumAppellativity
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEnumDeclension
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEnumGrammarCase
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEqAnimacy
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEqAppellativity
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEqDeclension
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEqGrammarCase
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
  = Arhelk.Russian.Lemma.Data.Substantive.$fEqSubstantiveProperties
instance GHC.Base.Monoid [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
  = Arhelk.Russian.Lemma.Data.Substantive.$fMonoidSubstantiveProperties
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  = Arhelk.Russian.Lemma.Data.Substantive.$fOrdAnimacy
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  = Arhelk.Russian.Lemma.Data.Substantive.$fOrdAppellativity
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  = Arhelk.Russian.Lemma.Data.Substantive.$fOrdDeclension
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  = Arhelk.Russian.Lemma.Data.Substantive.$fOrdGrammarCase
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  = Arhelk.Russian.Lemma.Data.Substantive.$fShowAnimacy
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  = Arhelk.Russian.Lemma.Data.Substantive.$fShowAppellativity
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  = Arhelk.Russian.Lemma.Data.Substantive.$fShowDeclension
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  = Arhelk.Russian.Lemma.Data.Substantive.$fShowGrammarCase
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
  = Arhelk.Russian.Lemma.Data.Substantive.$fShowSubstantiveProperties
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Substantive.Animacy]
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Substantive.Appellativity]
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Substantive.Declension]
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Substantive.GrammarCase]
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Substantive.SubstantiveProperties]
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowSubstantiveProperties
"SPEC/Arhelk.Russian.Lemma.Data.Substantive $dmshowbPrec @ Animacy" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                    Arhelk.Russian.Lemma.Data.Substantive.Animacy
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Substantive.Animacy
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAnimacy_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Substantive $dmshowbPrec @ Appellativity" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                          Arhelk.Russian.Lemma.Data.Substantive.Appellativity
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Substantive.Appellativity
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowAppellativity_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Substantive $dmshowbPrec @ Declension" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                       Arhelk.Russian.Lemma.Data.Substantive.Declension
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Substantive.Declension
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowDeclension_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Substantive $dmshowbPrec @ GrammarCase" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                        Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Substantive.GrammarCase
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Substantive.$fTextShowGrammarCase_$s$dmshowbPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

