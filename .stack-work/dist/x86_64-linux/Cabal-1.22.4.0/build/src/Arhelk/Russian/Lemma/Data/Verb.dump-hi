
==================== FINAL INTERFACE ====================
2015-11-03 17:00:05.306322 UTC

interface arhel_5l4tN5K8mLn1X8xpt1McF3:Arhelk.Russian.Lemma.Data.Verb 7102
  interface hash: 0c80a2adff90df7affd39cc262a43a08
  ABI hash: 7cf8f81539855801665ee1cc38cb45b2
  export-list hash: 4554aedce5e72d1f4125a8aa3a08686a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0fec855f7cc196a33e836a863eef834f
  sig of: Nothing
  used TH splices: True
  where
exports:
  Arhelk.Russian.Lemma.Data.Verb.verbAspect
  Arhelk.Russian.Lemma.Data.Verb.verbConjugation
  Arhelk.Russian.Lemma.Data.Verb.verbGender
  Arhelk.Russian.Lemma.Data.Verb.verbMood
  Arhelk.Russian.Lemma.Data.Verb.verbPerson
  Arhelk.Russian.Lemma.Data.Verb.verbQuantity
  Arhelk.Russian.Lemma.Data.Verb.verbTime
  Arhelk.Russian.Lemma.Data.Verb.verbVoice
  Arhelk.Russian.Lemma.Data.Verb.GrammarAspect{Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect}
  Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation{Arhelk.Russian.Lemma.Data.Verb.FirstConjugation Arhelk.Russian.Lemma.Data.Verb.SecondConjugation}
  Arhelk.Russian.Lemma.Data.Verb.GrammarMood{Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis Arhelk.Russian.Lemma.Data.Verb.ModusImperativus Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus}
  Arhelk.Russian.Lemma.Data.Verb.GrammarTime{Arhelk.Russian.Lemma.Data.Verb.FutureTime Arhelk.Russian.Lemma.Data.Verb.PastTime Arhelk.Russian.Lemma.Data.Verb.PresentTime}
  Arhelk.Russian.Lemma.Data.Verb.GrammarVoice{Arhelk.Russian.Lemma.Data.Verb.ActiveVoice Arhelk.Russian.Lemma.Data.Verb.PassiveVoice}
  Arhelk.Russian.Lemma.Data.Verb.VerbProperties{Arhelk.Russian.Lemma.Data.Verb.VerbProperties Arhelk.Russian.Lemma.Data.Verb._verbAspect Arhelk.Russian.Lemma.Data.Verb._verbConjugation Arhelk.Russian.Lemma.Data.Verb._verbGender Arhelk.Russian.Lemma.Data.Verb._verbMood Arhelk.Russian.Lemma.Data.Verb._verbPerson Arhelk.Russian.Lemma.Data.Verb._verbQuantity Arhelk.Russian.Lemma.Data.Verb._verbTime Arhelk.Russian.Lemma.Data.Verb._verbVoice}
module dependencies: Arhelk.Russian.Lemma.Data.Common
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 base-compat-0.8.2@basec_D4gHocz8sOX8PHzFB3nfQT
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      generic-deriving-1.8.0@gener_1Q2nStr4JSvHfQMGPOhz3e
                      ghc-prim-0.4.0.0 hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      integer-gmp-1.0.0.0
                      lens-family-th-0.4.1.0@lensf_1BXbC5Dg0C5GlgOx3ZVBtX
                      lens-family-core-1.2.0@lensf_41RJsMbLUP4I9prGLUphsy
                      lens-family-1.2.0@lensf_BcsUcH7SCv1L4ogXuYAwHp
                      lens-simple-0.1.0.8@lenss_3ClGSemuCIs1em35IPgh6B
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      template-haskell-2.10.0.0 text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      text-show-2@texts_6msSD0wSAlK5unkkd9ynxr
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Applicative
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Concurrent
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Exception
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Control.Monad.ST
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Array
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Bool
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.ByteString
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Char
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Complex
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Data
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Dynamic
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Either
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Fixed
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Floating
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Functor.Identity
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Integral
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.List
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Maybe
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Monoid
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ord
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Proxy
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Ratio
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Text
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Tuple
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Coercion
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Type.Equality
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Typeable
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Version
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Data.Void
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.C.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Foreign.Ptr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Event
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Fingerprint
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Generics
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.RTS.Flags
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.StaticPtr
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.Stats
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.GHC.TypeLits
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Numeric.Natural
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Exit
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.IO
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.System.Posix.Types
         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Text.Read
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics base-4.8.1.0:GHC.TypeLits
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  Arhelk.Russian.Lemma.Data.Common 572ccaef9e9d8d26928e2e83c1169210
  exports: 42b3be9622fc380d2fd7eeaf966bbf01
  GrammarGender 2f9551aa939c5575e30199a6f9a99ca2
  GrammarPerson b83fd0c6890bbabc8bd81277fd2b161e
  GrammarQuantity 3177ab9cc5c15dd29ff88742507e5168
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.Monoid bd73caba6e77f9944cb89ef5bec300c6
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Enum d0db4d619cd8916cc7a23444816222af
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  lens-family-th-0.4.1.0@lensf_1BXbC5Dg0C5GlgOx3ZVBtX:Lens.Family2.TH 7cc9ba1c82f1aa0ef8b5e3d05747f5ba
import  -/  lens-simple-0.1.0.8@lenss_3ClGSemuCIs1em35IPgh6B:Lens.Simple 0415aae47fc565920c4518de36a394c8
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow f98816fc41e1809d42ba206af16c7297
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Classes 2c021982bdb0927c661f3d4c9188a464
import  -/  text-show-2@texts_6msSD0wSAlK5unkkd9ynxr:TextShow.Utils c7b192e03bc8b48d2b27d4f2a73e0aa2
729684c8de84ee503730e89c4521d8da
  $fBoundedGrammarAspect ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                  Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fBoundedGrammarConjugation ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                  Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -}
b12853535a51b0d68aa53fee712e6d6a
  $fBoundedGrammarMood ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                  Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -}
172ac35ef00cf680590b3e81679c4616
  $fBoundedGrammarTime ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.PastTime
                  Arhelk.Russian.Lemma.Data.Verb.FutureTime -}
b6bab249be4ba453bb258963386816b8
  $fBoundedGrammarVoice ::
    GHC.Enum.Bounded Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                  Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$csucc
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$cpred
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$cenumFromThenTo -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 1, Strictness: <L,U>b -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect2 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_go2
                   1) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect3 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_go3
                   0) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect4 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Strictness: b -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect5 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Strictness: b -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect3
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect2 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> $j1 1 }
                 } in
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> $j 1 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   x2 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> $j1 1 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> $j 1 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect }
                       Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> $j 1 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> GHC.Types.I# 1 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$cpred ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect4
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$csucc ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect5 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$ctoEnum ww1 }) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect_$ctoEnum x)
                   ys) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   (case x of wild { GHC.Types.I# a22 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                      a22 })
                   ys) -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_go ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 1, Strictness: <L,U> -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_go1 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 1, Strictness: <L,U> -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_go2 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
729684c8de84ee503730e89c4521d8da
  $fEnumGrammarAspect_go3 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$csucc
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$cpred
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$cenumFromThenTo -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 1, Strictness: <L,U>b -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation2 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_go2
                   1) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation3 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_go3
                   0) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation4 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Strictness: b -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation5 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Strictness: b -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation3
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation2 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_c1
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_c1
                                    (GHC.Types.[]
                                       @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> $j1 1 }
                 } in
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> $j 1 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   x2 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_c
                                     (GHC.Types.[]
                                        @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> $j1 1 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> $j 1 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation }
                       Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_go x1
                            GHC.Types.True
                            -> GHC.Types.[]
                                 @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> $j 1 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> GHC.Types.I# 1 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$cpred ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation4
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.FirstConjugation }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$csucc ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation5 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$ctoEnum1 ww1 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation_$ctoEnum
                      x)
                   ys) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   (case x of wild { GHC.Types.I# a22 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                      a22 })
                   ys) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_go ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 1, Strictness: <L,U> -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_go1 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 1, Strictness: <L,U> -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_go2 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEnumGrammarConjugation_go3 ::
    GHC.Prim.Int#
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$csucc
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$cpred
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_$cenumFromThenTo -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood1 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go4
                   3) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood2 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go5
                   2) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood3 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go6
                   1) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood4 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go7
                   0) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood5 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 1, Strictness: <L,U>b -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood6 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Strictness: b -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood7 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Strictness: b -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood4
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood3
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood2
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood1 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 let {
                   $j :: GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_c
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_c
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 3 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> $j1 1
                       Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> $j1 2
                       Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> $j1 3 }
                 } in
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> $j 1
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> $j 2
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> $j 3 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 let {
                   $j :: GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go3 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood }
                       Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go2 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood }
                       Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood }
                       Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> $j 1
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> $j 2
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> $j 3 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> GHC.Types.I# 1
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.I# 2
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> GHC.Types.I# 3 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$cpred ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood6
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> Arhelk.Russian.Lemma.Data.Verb.ModusImperativus }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$csucc ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood7 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$ctoEnum2 ww1 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarMood] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   (case x of wild { GHC.Types.I# a22 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                      a22 })
                   ys) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go1 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go2 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go3 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go4 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go5 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go6 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fEnumGrammarMood_go7 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$csucc
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$cpred
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$cenumFromThenTo -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 1, Strictness: <L,U>b -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime2 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_go3
                   2) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime3 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_go4
                   1) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime4 :: [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_go5
                   0) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime5 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Strictness: b -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime6 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Strictness: b -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime4
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime3
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime2 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 let {
                   $j :: GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 2 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Verb.PastTime -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.PresentTime -> $j1 1
                       Arhelk.Russian.Lemma.Data.Verb.FutureTime -> $j1 2 }
                 } in
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime -> $j 1
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime -> $j 2 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   x2 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 let {
                   $j :: GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Verb.PastTime
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Verb.PresentTime
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                     x4
                                     x5
                                     1 }
                           Arhelk.Russian.Lemma.Data.Verb.FutureTime
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                     x4
                                     x5
                                     2
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                                     x4
                                     x5
                                     2 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Verb.PastTime -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.PresentTime -> $j1 1
                       Arhelk.Russian.Lemma.Data.Verb.FutureTime -> $j1 2 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime -> $j 1
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime -> $j 2 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 let {
                   $j :: GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Verb.PastTime
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_go2 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime }
                       Arhelk.Russian.Lemma.Data.Verb.PresentTime
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime }
                       Arhelk.Russian.Lemma.Data.Verb.FutureTime
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime -> $j 1
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime -> $j 2 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.I# 1
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.I# 2 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$cpred ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime5
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> Arhelk.Russian.Lemma.Data.Verb.PastTime
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> Arhelk.Russian.Lemma.Data.Verb.PresentTime }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$csucc ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime6 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$ctoEnum3 ww1 }) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarTime] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime_$ctoEnum x)
                   ys) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarTime] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   (case x of wild { GHC.Types.I# a22 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                      a22 })
                   ys) -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_go ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, Strictness: <L,U> -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_go1 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, Strictness: <L,U> -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_go2 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, Strictness: <L,U> -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_go3 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_go4 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
172ac35ef00cf680590b3e81679c4616
  $fEnumGrammarTime_go5 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice ::
    GHC.Enum.Enum Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$csucc
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$cpred
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$ctoEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$cfromEnum
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$cenumFrom
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$cenumFromThen
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$cenumFromTo
                  Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$cenumFromThenTo -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 1, Strictness: <L,U>b -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice2 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_go2
                   1) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice3 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_go3
                   0) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice4 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Strictness: b -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice5 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Strictness: b -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$cenumFrom ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice3
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice2 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$cenumFromThen ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int#
                                  -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                                    Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_c1
                                    (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> $j1 1 }
                 } in
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> $j 1 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$cenumFromThenTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   x2 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int#
                              -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                                     x4
                                     x5
                                     0 }
                           Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                                     Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_c
                                     (GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> $j1 0
                       Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> $j1 1 }
                 } in
                 case x1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> $j 1 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$cenumFromTo ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice }
                       Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False
                            -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice } }
                 } in
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> $j 0
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> $j 1 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$cfromEnum ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.I# 0
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.I# 1 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$cpred ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice4
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.ActiveVoice }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$csucc ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice5 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_$ctoEnum ::
    GHC.Types.Int -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$ctoEnum4 ww1 }) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_c ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   (Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice_$ctoEnum x)
                   ys) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_c1 ::
    GHC.Types.Int
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
    -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int
                   ys :: [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice] ->
                 GHC.Types.:
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   (case x of wild { GHC.Types.I# a22 ->
                    GHC.Prim.tagToEnum#
                      @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                      a22 })
                   ys) -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_go ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 1, Strictness: <L,U> -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_go1 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 1, Strictness: <L,U> -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_go2 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b6bab249be4ba453bb258963386816b8
  $fEnumGrammarVoice_go3 ::
    GHC.Prim.Int# -> [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
729684c8de84ee503730e89c4521d8da
  $fEqGrammarAspect ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarAspect_$c==
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarAspect_$c/= -}
729684c8de84ee503730e89c4521d8da
  $fEqGrammarAspect_$c/= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.False } }) -}
729684c8de84ee503730e89c4521d8da
  $fEqGrammarAspect_$c== ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.True } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEqGrammarConjugation ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarConjugation_$c==
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarConjugation_$c/= -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEqGrammarConjugation_$c/= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.False } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fEqGrammarConjugation_$c== ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.True } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEqGrammarMood ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarMood_$c==
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarMood_$c/= -}
b12853535a51b0d68aa53fee712e6d6a
  $fEqGrammarMood_$c/= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fEqGrammarMood_$c== ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.True } }) -}
172ac35ef00cf680590b3e81679c4616
  $fEqGrammarTime ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarTime_$c==
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarTime_$c/= -}
172ac35ef00cf680590b3e81679c4616
  $fEqGrammarTime_$c/= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime
                        -> GHC.Types.False } }) -}
172ac35ef00cf680590b3e81679c4616
  $fEqGrammarTime_$c== ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.True } }) -}
b6bab249be4ba453bb258963386816b8
  $fEqGrammarVoice ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarVoice_$c==
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarVoice_$c/= -}
b6bab249be4ba453bb258963386816b8
  $fEqGrammarVoice_$c/= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                        -> GHC.Types.False } }) -}
b6bab249be4ba453bb258963386816b8
  $fEqGrammarVoice_$c== ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case ds1 of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                        -> GHC.Types.True } }) -}
b8073247f4e8773d89470ff4abb60369
  $fEqVerbProperties ::
    GHC.Classes.Eq Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                  Arhelk.Russian.Lemma.Data.Verb.$fEqVerbProperties_$c==
                  Arhelk.Russian.Lemma.Data.Verb.$fEqVerbProperties_$c/= -}
b8073247f4e8773d89470ff4abb60369
  $fEqVerbProperties_$c/= ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   b :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case Arhelk.Russian.Lemma.Data.Verb.$fEqVerbProperties_$c==
                        a22
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b8073247f4e8773d89470ff4abb60369
  $fEqVerbProperties_$c== ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   w1 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case w of ww { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
b8073247f4e8773d89470ff4abb60369
  $fMonoidVerbProperties ::
    GHC.Base.Monoid Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                  Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmempty
                  Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmappend
                  Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties_$cmconcat -}
b8073247f4e8773d89470ff4abb60369
  $fMonoidVerbProperties_$cmappend ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   w1 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case Arhelk.Russian.Lemma.Data.Verb.$w$cmappend
                        w
                        w1 of ww { (#,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
b8073247f4e8773d89470ff4abb60369
  $fMonoidVerbProperties_$cmconcat ::
    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Arhelk.Russian.Lemma.Data.Verb.VerbProperties] ->
                 case Arhelk.Russian.Lemma.Data.Verb.$wgo
                        w of ww { (#,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
b8073247f4e8773d89470ff4abb60369
  $fMonoidVerbProperties_$cmempty ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Common.GrammarPerson)
                   (GHC.Base.Nothing
                      @ Arhelk.Russian.Lemma.Data.Common.GrammarQuantity)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Common.GrammarGender)
                   (GHC.Base.Nothing @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                   (GHC.Base.Nothing
                      @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$ccompare
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$c<
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$c<=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$c>
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$c>=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$cmax
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect_$cmin -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$c< ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$c<= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.True } }) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$c> ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.False } }) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$c>= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$ccompare ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                        -> GHC.Types.EQ } }) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$cmax ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect -> y
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect } }) -}
729684c8de84ee503730e89c4521d8da
  $fOrdGrammarAspect_$cmin ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect }
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect -> y }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$ccompare
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$c<
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$c<=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$c>
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$c>=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$cmax
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation_$cmin -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$c< ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$c<= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.True } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$c> ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.False } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$c>= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$ccompare ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                        -> GHC.Types.EQ } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$cmax ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation -> y
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.SecondConjugation } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fOrdGrammarConjugation_$cmin ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.FirstConjugation }
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation -> y }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$ccompare
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$c<
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$c<=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$c>
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$c>=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$cmax
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood_$cmin -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$c< ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$c<= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.True } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$c> ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$c>= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$ccompare ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> GHC.Types.EQ } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$cmax ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus -> y
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fOrdGrammarMood_$cmin ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus }
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> case y of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                        Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis }
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                        Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                        -> Arhelk.Russian.Lemma.Data.Verb.ModusImperativus }
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus -> y }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$ccompare
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$c<
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$c<=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$c>
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$c>=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$cmax
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime_$cmin -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$c< ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$c<= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.True } }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$c> ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime
                        -> GHC.Types.False } }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$c>= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$ccompare ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.LT
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime -> GHC.Types.EQ } }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$cmax ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime -> y
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case y of wild1 {
                        DEFAULT -> Arhelk.Russian.Lemma.Data.Verb.PresentTime
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime
                        -> Arhelk.Russian.Lemma.Data.Verb.FutureTime }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.FutureTime } }) -}
172ac35ef00cf680590b3e81679c4616
  $fOrdGrammarTime_$cmin ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.PastTime }
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> case y of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.PastTime
                        -> Arhelk.Russian.Lemma.Data.Verb.PastTime
                        Arhelk.Russian.Lemma.Data.Verb.PresentTime
                        -> Arhelk.Russian.Lemma.Data.Verb.PresentTime
                        Arhelk.Russian.Lemma.Data.Verb.FutureTime
                        -> Arhelk.Russian.Lemma.Data.Verb.PresentTime }
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime -> y }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice ::
    GHC.Classes.Ord Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$ccompare
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$c<
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$c<=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$c>
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$c>=
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$cmax
                  Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice_$cmin -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$c< ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$c<= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.False
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                        -> GHC.Types.True } }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$c> ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                        -> GHC.Types.False } }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$c>= ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.True
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.False }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$ccompare ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   b :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case a22 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.EQ
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.LT }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case b of wild1 {
                        Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> GHC.Types.GT
                        Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> GHC.Types.EQ } }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$cmax ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice -> y
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.PassiveVoice } }) -}
b6bab249be4ba453bb258963386816b8
  $fOrdGrammarVoice_$cmin ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   y :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> case y of wild1 { DEFAULT ->
                      Arhelk.Russian.Lemma.Data.Verb.ActiveVoice }
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice -> y }) -}
729684c8de84ee503730e89c4521d8da
  $fShowGrammarAspect ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect_$cshow
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect_$cshowList -}
729684c8de84ee503730e89c4521d8da
  $fShowGrammarAspect1 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect3)
                        eta
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect2)
                        eta }) -}
b3f8cacee2e1996e308a8a5fb4bd6bef
  $fShowGrammarAspect2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ImperfectiveAspect"#) -}
c5ad8402f5138b787395ecb7d28cf08d
  $fShowGrammarAspect3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PerfectiveAspect"#) -}
729684c8de84ee503730e89c4521d8da
  $fShowGrammarAspect_$cshow ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect3
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect2 }) -}
729684c8de84ee503730e89c4521d8da
  $fShowGrammarAspect_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect1) -}
729684c8de84ee503730e89c4521d8da
  $fShowGrammarAspect_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PerfectiveAspect
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect3)
                        eta
                   Arhelk.Russian.Lemma.Data.Verb.ImperfectiveAspect
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect2)
                        eta }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fShowGrammarConjugation ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation_$cshow
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation_$cshowList -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fShowGrammarConjugation1 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation3)
                        eta
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation2)
                        eta }) -}
4c6a1992b904eb295eb5b9440ac9c3ee
  $fShowGrammarConjugation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SecondConjugation"#) -}
3571b86ba1c0c1dca7f8f18f88cc27f9
  $fShowGrammarConjugation3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FirstConjugation"#) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fShowGrammarConjugation_$cshow ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation3
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation2 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fShowGrammarConjugation_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation1) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fShowGrammarConjugation_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.FirstConjugation
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation3)
                        eta
                   Arhelk.Russian.Lemma.Data.Verb.SecondConjugation
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation2)
                        eta }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fShowGrammarMood ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood_$cshow
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood_$cshowList -}
914a09e4f4bab7e84a410cf3f776e842
  $fShowGrammarMood1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModusInfinitivus"#) -}
c7bfd44a746fe2f50226d401cce66f71
  $fShowGrammarMood2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModusImperativus"#) -}
5479e939cca98ef18dc1c884842e98b5
  $fShowGrammarMood3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModusConditionalis"#) -}
f83649567e6ebbf5b241918489086176
  $fShowGrammarMood4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModusIndicativus"#) -}
b12853535a51b0d68aa53fee712e6d6a
  $fShowGrammarMood_$cshow ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                 Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b12853535a51b0d68aa53fee712e6d6a
  $fShowGrammarMood_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarMood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   Arhelk.Russian.Lemma.Data.Verb.$w$cshowsPrec) -}
b12853535a51b0d68aa53fee712e6d6a
  $fShowGrammarMood_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   w2 :: GHC.Base.String ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$cshowsPrec w1 w2) -}
172ac35ef00cf680590b3e81679c4616
  $fShowGrammarTime ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime_$cshow
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime_$cshowList -}
d112bb3160f6e903bd618a7ae9f4f041
  $fShowGrammarTime1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FutureTime"#) -}
99cc71aff50eace041132ddb77bfc344
  $fShowGrammarTime2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PresentTime"#) -}
812deb8c570e16913a62fbc618b0038f
  $fShowGrammarTime3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PastTime"#) -}
172ac35ef00cf680590b3e81679c4616
  $fShowGrammarTime_$cshow ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime3
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime2
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime1 }) -}
172ac35ef00cf680590b3e81679c4616
  $fShowGrammarTime_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarTime] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   Arhelk.Russian.Lemma.Data.Verb.$w$cshowsPrec1) -}
172ac35ef00cf680590b3e81679c4616
  $fShowGrammarTime_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   w2 :: GHC.Base.String ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$cshowsPrec1 w1 w2) -}
b6bab249be4ba453bb258963386816b8
  $fShowGrammarVoice ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice_$cshow
                  Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice_$cshowList -}
b6bab249be4ba453bb258963386816b8
  $fShowGrammarVoice1 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice3)
                        eta
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice2)
                        eta }) -}
c0ab282436db19d4d7e22202a26282cd
  $fShowGrammarVoice2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PassiveVoice"#) -}
8d4458707f2484bca91424c65c3feacb
  $fShowGrammarVoice3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ActiveVoice"#) -}
b6bab249be4ba453bb258963386816b8
  $fShowGrammarVoice_$cshow ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                 case x of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice3
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice2 }) -}
b6bab249be4ba453bb258963386816b8
  $fShowGrammarVoice_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice1) -}
b6bab249be4ba453bb258963386816b8
  $fShowGrammarVoice_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ActiveVoice
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice3)
                        eta
                   Arhelk.Russian.Lemma.Data.Verb.PassiveVoice
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice2)
                        eta }) -}
b8073247f4e8773d89470ff4abb60369
  $fShowVerbProperties ::
    GHC.Show.Show Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                  Arhelk.Russian.Lemma.Data.Verb.$fShowVerbProperties_$cshowsPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fShowVerbProperties_$cshow
                  Arhelk.Russian.Lemma.Data.Verb.$fShowVerbProperties_$cshowList -}
b8073247f4e8773d89470ff4abb60369
  $fShowVerbProperties1 ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case w of ww { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$cshowsPrec2
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
b8073247f4e8773d89470ff4abb60369
  $fShowVerbProperties_$cshow ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 Arhelk.Russian.Lemma.Data.Verb.$fShowVerbProperties_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b8073247f4e8773d89470ff4abb60369
  $fShowVerbProperties_$cshowList ::
    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   Arhelk.Russian.Lemma.Data.Verb.$fShowVerbProperties1) -}
b8073247f4e8773d89470ff4abb60369
  $fShowVerbProperties_$cshowsPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10 } }) -}
729684c8de84ee503730e89c4521d8da
  $fTextShowGrammarAspect ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect_$cshowb
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect_$cshowbList -}
729684c8de84ee503730e89c4521d8da
  $fTextShowGrammarAspect1 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
729684c8de84ee503730e89c4521d8da
  $fTextShowGrammarAspect2 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
729684c8de84ee503730e89c4521d8da
  $fTextShowGrammarAspect_$cshowb ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Verb.GrammarAspect>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
729684c8de84ee503730e89c4521d8da
  $fTextShowGrammarAspect_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
729684c8de84ee503730e89c4521d8da
  $fTextShowGrammarAspect_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Verb.GrammarAspect>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fTextShowGrammarConjugation ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation_$cshowb
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation_$cshowbList -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fTextShowGrammarConjugation1 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fTextShowGrammarConjugation2 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa1
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fTextShowGrammarConjugation_$cshowb ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fTextShowGrammarConjugation_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $fTextShowGrammarConjugation_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
b12853535a51b0d68aa53fee712e6d6a
  $fTextShowGrammarMood ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood_$cshowb
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood_$cshowbList -}
b12853535a51b0d68aa53fee712e6d6a
  $fTextShowGrammarMood1 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
b12853535a51b0d68aa53fee712e6d6a
  $fTextShowGrammarMood2 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa2
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
b12853535a51b0d68aa53fee712e6d6a
  $fTextShowGrammarMood_$cshowb ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Verb.GrammarMood>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
b12853535a51b0d68aa53fee712e6d6a
  $fTextShowGrammarMood_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Verb.GrammarMood]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
b12853535a51b0d68aa53fee712e6d6a
  $fTextShowGrammarMood_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood_$cshowb eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Verb.GrammarMood>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
172ac35ef00cf680590b3e81679c4616
  $fTextShowGrammarTime ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime_$cshowb
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime_$cshowbList -}
172ac35ef00cf680590b3e81679c4616
  $fTextShowGrammarTime1 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
172ac35ef00cf680590b3e81679c4616
  $fTextShowGrammarTime2 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa3
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
172ac35ef00cf680590b3e81679c4616
  $fTextShowGrammarTime_$cshowb ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Verb.GrammarTime>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
172ac35ef00cf680590b3e81679c4616
  $fTextShowGrammarTime_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Verb.GrammarTime]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
172ac35ef00cf680590b3e81679c4616
  $fTextShowGrammarTime_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime_$cshowb eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Verb.GrammarTime>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
b6bab249be4ba453bb258963386816b8
  $fTextShowGrammarVoice ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice_$s$dmshowbPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice_$cshowb
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice_$cshowbList -}
b6bab249be4ba453bb258963386816b8
  $fTextShowGrammarVoice1 ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4, Strictness: <S,1*U> -}
b6bab249be4ba453bb258963386816b8
  $fTextShowGrammarVoice2 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> Data.Text.Internal.Builder.Buffer s
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   @ s
                   w1 :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w2 :: Data.Text.Internal.Builder.Buffer s
                   w3 :: GHC.Prim.State# s[OneShot] ->
                 case w2 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa4
                   w
                   @ s
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
b6bab249be4ba453bb258963386816b8
  $fTextShowGrammarVoice_$cshowb ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice2
                  `cast`
                (<Arhelk.Russian.Lemma.Data.Verb.GrammarVoice>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
b6bab249be4ba453bb258963386816b8
  $fTextShowGrammarVoice_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 4, Strictness: <S,1*U>,
     Unfolding: (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice1
                   `cast`
                 (<[Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]>_R
                  ->_R Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))) -}
b6bab249be4ba453bb258963386816b8
  $fTextShowGrammarVoice_$s$dmshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 5, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   @ s
                   eta1 :: Data.Text.Internal.Builder.Buffer s
                           -> GHC.ST.ST s [Data.Text.Internal.Text]
                   eta2 :: Data.Text.Internal.Builder.Buffer s
                   eta3 :: GHC.Prim.State# s[OneShot] ->
                 ((Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice_$cshowb
                     eta)
                    `cast`
                  (Data.Text.Internal.Builder.NTCo:Builder[0])
                    @ s
                    eta1
                    eta2)
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                   eta3)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Arhelk.Russian.Lemma.Data.Verb.GrammarVoice>_R
                 ->_R Trans
                          (forall s.
                           <Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                           ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) -}
b8073247f4e8773d89470ff4abb60369
  $fTextShowVerbProperties ::
    TextShow.Classes.TextShow
      Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowbPrec
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowb
                  Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowbList -}
c67d6eef86d8bb6446f36f9a3267ae83
  $fTextShowVerbProperties1 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa5 @ s w ww1 ww2 ww3 ww4 w2 }) -}
6e0f5a95a48aef0307becd2faaae57d5
  $fTextShowVerbProperties2 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa6 @ s w ww1 ww2 ww3 ww4 w2 }) -}
6d04d8cbf6f2e52740f56632a26132bf
  $fTextShowVerbProperties3 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa7 @ s w ww1 ww2 ww3 ww4 w2 }) -}
19bd9ba975f0c5e0c4179f90d82c3dcb
  $fTextShowVerbProperties4 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa8 @ s w ww1 ww2 ww3 ww4 w2 }) -}
746c4cc45c7be2f58141596ac7062a13
  $fTextShowVerbProperties5 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa9 @ s w ww1 ww2 ww3 ww4 w2 }) -}
9e598c3fc71b439fc50ee4f13eb9a0bb
  $fTextShowVerbProperties6 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa10 @ s w ww1 ww2 ww3 ww4 w2 }) -}
bcf4e1b1188748f6ef611c69683711a6
  $fTextShowVerbProperties7 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa11 @ s w ww1 ww2 ww3 ww4 w2 }) -}
4527108eea08ddde65e59959fb3e20b6
  $fTextShowVerbProperties8 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   w1 :: Data.Text.Internal.Builder.Buffer s
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { Data.Text.Internal.Builder.Buffer ww1 ww2 ww3 ww4 ->
                 Arhelk.Russian.Lemma.Data.Verb.$wa12 @ s w ww1 ww2 ww3 ww4 w2 }) -}
e0f97a94837a60a1f184cb40306b45e9
  $fTextShowVerbProperties9 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> Data.Text.Internal.Builder.Buffer s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 3,
     Unfolding: (\ @ s
                   k :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ds1 :: Data.Text.Internal.Builder.Buffer s
                   eta :: GHC.Prim.State# s[OneShot] ->
                 case ds1 of wild1 { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww :: GHC.Prim.MutableByteArray# s
                       ww1 :: GHC.Prim.Int#
                       ww2 :: GHC.Prim.Int#
                       ww3 :: GHC.Prim.Int#
                       w :: [GHC.Types.Char]
                       w1 :: GHC.Prim.State# s[OneShot] ->
                     case w of wild2 {
                       []
                       -> (k (Data.Text.Internal.Builder.Buffer @ s ww ww1 ww2 ww3))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w1
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww3 1) of wild3 {
                            GHC.Types.False
                            -> case ipv4 of wild4 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild5 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w1 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww
                                      ww1
                                      (GHC.Prim.+# ww2 2)
                                      (GHC.Prim.-# ww3 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww
                                           (GHC.Prim.+# ww1 ww2)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w1 of s2# { DEFAULT ->
                                    $wa30
                                      ww
                                      ww1
                                      (GHC.Prim.+# ww2 1)
                                      (GHC.Prim.-# ww3 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w1 of ds4 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww1
                                       ww2)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild2
                                            ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30
                   dt
                   dt1
                   dt2
                   dt3
                   Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_str
                   eta }) -}
b8073247f4e8773d89470ff4abb60369
  $fTextShowVerbProperties_$cshowb ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case w of ww { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Arhelk.Russian.Lemma.Data.Verb.$w$cshowb
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
b8073247f4e8773d89470ff4abb60369
  $fTextShowVerbProperties_$cshowbList ::
    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta :: [Arhelk.Russian.Lemma.Data.Verb.VerbProperties] ->
                 case eta of wild {
                   []
                   -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties9
                        `cast`
                      (Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                   : x xs
                   -> let {
                        ds :: Data.Text.Internal.Builder.Builder
                        = case x of ww { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                          Arhelk.Russian.Lemma.Data.Verb.$w$cshowb
                            ww1
                            ww2
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7
                            ww8 }
                      } in
                      let {
                        ds1 :: Data.Text.Internal.Builder.Builder
                        = Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_go xs
                      } in
                      (\ @ s
                         eta1 :: Data.Text.Internal.Builder.Buffer s
                                 -> GHC.ST.ST s [Data.Text.Internal.Text] ->
                       let {
                         eta2 :: Data.Text.Internal.Builder.Buffer s
                                 -> GHC.ST.ST s [Data.Text.Internal.Text]
                         = ds `cast` (Data.Text.Internal.Builder.NTCo:Builder[0])
                             @ s
                             (ds1 `cast` (Data.Text.Internal.Builder.NTCo:Builder[0]) @ s eta1)
                       } in
                       \ eta3 :: Data.Text.Internal.Builder.Buffer s
                         eta4 :: GHC.Prim.State# s[OneShot] ->
                       case eta3 of wild1 { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# 2 dt3) of wild2 {
                         GHC.Types.False
                         -> case dt2 of wild3 {
                              DEFAULT
                              -> (# eta4,
                                    GHC.Types.:
                                      @ Data.Text.Internal.Text
                                      (Data.Text.Internal.Text
                                         dt
                                           `cast`
                                         (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                s) GHC.Prim.ByteArray#)
                                         dt1
                                         wild3)
                                      (case GHC.Prim.newByteArray#
                                              @ s
                                              224
                                              eta4 of ds2 { (#,#) ipv1 ipv2 ->
                                       case GHC.Prim.writeWord16Array#
                                              @ s
                                              ipv2
                                              0
                                              __word 91
                                              ipv1 of s2# { DEFAULT ->
                                       case (eta2
                                               (Data.Text.Internal.Builder.Buffer @ s ipv2 0 1 111))
                                              `cast`
                                            (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                                              s2# of ds3 { (#,#) ipv4 ipv5 ->
                                       ipv5 } } }) #)
                              0
                              -> case GHC.Prim.newByteArray#
                                        @ s
                                        224
                                        eta4 of ds2 { (#,#) ipv1 ipv2 ->
                                 case GHC.Prim.writeWord16Array#
                                        @ s
                                        ipv2
                                        0
                                        __word 91
                                        ipv1 of s2# { DEFAULT ->
                                 (eta2 (Data.Text.Internal.Builder.Buffer @ s ipv2 0 1 111))
                                   `cast`
                                 (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                                   s2# } } }
                         GHC.Types.True
                         -> case GHC.Prim.writeWord16Array#
                                   @ s
                                   dt
                                   (GHC.Prim.+# dt1 dt2)
                                   __word 91
                                   eta4 of s2# { DEFAULT ->
                            (eta2
                               (Data.Text.Internal.Builder.Buffer
                                  @ s
                                  dt
                                  dt1
                                  (GHC.Prim.+# dt2 1)
                                  (GHC.Prim.-# dt3 1)))
                              `cast`
                            (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                              s2# } } })
                        `cast`
                      (Trans
                           (forall s.
                            <Data.Text.Internal.Builder.Buffer s
                             -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                            ->_R <Data.Text.Internal.Builder.Buffer s>_R
                            ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                           (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) }) -}
b8073247f4e8773d89470ff4abb60369
  $fTextShowVerbProperties_$cshowbPrec ::
    GHC.Types.Int
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties_$cshowb
                   eta) -}
b8073247f4e8773d89470ff4abb60369
  $fTextShowVerbProperties_go ::
    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U> -}
4395b4cfbbc87909b61b85c854f706da
  $fTextShowVerbProperties_str :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "[]"#) -}
db32f4c3d74164c74ecd793c624c59ae
  $w$c== ::
    GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
b8073247f4e8773d89470ff4abb60369
  $w$cmappend ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> (# GHC.Base.Maybe
            Arhelk.Russian.Lemma.Data.Common.GrammarPerson,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   w1 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 (# case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds8 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds1 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds9 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds2 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds10 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds3 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds11 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds4 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds12 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds5 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds13 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds6 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds14 }
                      GHC.Base.Just ipv -> wild1 } },
                    case w of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    case ds7 of wild1 {
                      GHC.Base.Nothing
                      -> case w1 of wild2 { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                         ds15 }
                      GHC.Base.Just ipv -> wild1 } } #)) -}
c2dee0a8b15814a86de175e9dd8b66bd
  $w$cshowb ::
    GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 8,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Common.GrammarPerson
                   ww1 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
                   ww2 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   ww3 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   ww4 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                   ww5 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Common.GrammarGender
                   ww6 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                   ww7 :: GHC.Base.Maybe
                            Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                 TextShow.Utils.unwordsB
                   (GHC.Types.:
                      @ Data.Text.Internal.Builder.Builder
                      (case ww of wild {
                         GHC.Base.Nothing
                         -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties8
                              `cast`
                            (Trans
                                 (forall s.
                                  <Data.Text.Internal.Builder.Buffer s
                                   -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                  ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                  ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                                 (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                         GHC.Base.Just x
                         -> (Arhelk.Russian.Lemma.Data.Common.$fTextShowGrammarPerson2 x)
                              `cast`
                            (Trans
                                 (forall s.
                                  <Data.Text.Internal.Builder.Buffer s
                                   -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                  ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                  ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                                 (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                      (GHC.Types.:
                         @ Data.Text.Internal.Builder.Builder
                         (case ww1 of wild {
                            GHC.Base.Nothing
                            -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties7
                                 `cast`
                               (Trans
                                    (forall s.
                                     <Data.Text.Internal.Builder.Buffer s
                                      -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                     ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                     ->_R Sym (GHC.ST.NTCo:ST[0]
                                                   <s>_N <[Data.Text.Internal.Text]>_R))
                                    (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                            GHC.Base.Just x
                            -> (Arhelk.Russian.Lemma.Data.Common.$fTextShowGrammarQuantity2 x)
                                 `cast`
                               (Trans
                                    (forall s.
                                     <Data.Text.Internal.Builder.Buffer s
                                      -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                     ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                     ->_R Sym (GHC.ST.NTCo:ST[0]
                                                   <s>_N <[Data.Text.Internal.Text]>_R))
                                    (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                         (GHC.Types.:
                            @ Data.Text.Internal.Builder.Builder
                            (case ww2 of wild {
                               GHC.Base.Nothing
                               -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties6
                                    `cast`
                                  (Trans
                                       (forall s.
                                        <Data.Text.Internal.Builder.Buffer s
                                         -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                        ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                        ->_R Sym (GHC.ST.NTCo:ST[0]
                                                      <s>_N <[Data.Text.Internal.Text]>_R))
                                       (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                               GHC.Base.Just x
                               -> (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime2 x)
                                    `cast`
                                  (Trans
                                       (forall s.
                                        <Data.Text.Internal.Builder.Buffer s
                                         -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                        ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                        ->_R Sym (GHC.ST.NTCo:ST[0]
                                                      <s>_N <[Data.Text.Internal.Text]>_R))
                                       (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                            (GHC.Types.:
                               @ Data.Text.Internal.Builder.Builder
                               (case ww3 of wild {
                                  GHC.Base.Nothing
                                  -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties5
                                       `cast`
                                     (Trans
                                          (forall s.
                                           <Data.Text.Internal.Builder.Buffer s
                                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                           ->_R Sym (GHC.ST.NTCo:ST[0]
                                                         <s>_N <[Data.Text.Internal.Text]>_R))
                                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                  GHC.Base.Just x
                                  -> (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood2 x)
                                       `cast`
                                     (Trans
                                          (forall s.
                                           <Data.Text.Internal.Builder.Buffer s
                                            -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                           ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                           ->_R Sym (GHC.ST.NTCo:ST[0]
                                                         <s>_N <[Data.Text.Internal.Text]>_R))
                                          (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                               (GHC.Types.:
                                  @ Data.Text.Internal.Builder.Builder
                                  (case ww4 of wild {
                                     GHC.Base.Nothing
                                     -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties4
                                          `cast`
                                        (Trans
                                             (forall s.
                                              <Data.Text.Internal.Builder.Buffer s
                                               -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                              ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                              ->_R Sym (GHC.ST.NTCo:ST[0]
                                                            <s>_N <[Data.Text.Internal.Text]>_R))
                                             (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                     GHC.Base.Just x
                                     -> (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect2 x)
                                          `cast`
                                        (Trans
                                             (forall s.
                                              <Data.Text.Internal.Builder.Buffer s
                                               -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                              ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                              ->_R Sym (GHC.ST.NTCo:ST[0]
                                                            <s>_N <[Data.Text.Internal.Text]>_R))
                                             (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                                  (GHC.Types.:
                                     @ Data.Text.Internal.Builder.Builder
                                     (case ww5 of wild {
                                        GHC.Base.Nothing
                                        -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties3
                                             `cast`
                                           (Trans
                                                (forall s.
                                                 <Data.Text.Internal.Builder.Buffer s
                                                  -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                 ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                 ->_R Sym (GHC.ST.NTCo:ST[0]
                                                               <s>_N <[Data.Text.Internal.Text]>_R))
                                                (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                        GHC.Base.Just x
                                        -> (Arhelk.Russian.Lemma.Data.Common.$fTextShowGrammarGender2
                                              x)
                                             `cast`
                                           (Trans
                                                (forall s.
                                                 <Data.Text.Internal.Builder.Buffer s
                                                  -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                 ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                 ->_R Sym (GHC.ST.NTCo:ST[0]
                                                               <s>_N <[Data.Text.Internal.Text]>_R))
                                                (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                                     (GHC.Types.:
                                        @ Data.Text.Internal.Builder.Builder
                                        (case ww6 of wild {
                                           GHC.Base.Nothing
                                           -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties2
                                                `cast`
                                              (Trans
                                                   (forall s.
                                                    <Data.Text.Internal.Builder.Buffer s
                                                     -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                    ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                    ->_R Sym (GHC.ST.NTCo:ST[0]
                                                                  <s>_N
                                                                  <[Data.Text.Internal.Text]>_R))
                                                   (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                           GHC.Base.Just x
                                           -> (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice2
                                                 x)
                                                `cast`
                                              (Trans
                                                   (forall s.
                                                    <Data.Text.Internal.Builder.Buffer s
                                                     -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                    ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                    ->_R Sym (GHC.ST.NTCo:ST[0]
                                                                  <s>_N
                                                                  <[Data.Text.Internal.Text]>_R))
                                                   (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                                        (GHC.Types.:
                                           @ Data.Text.Internal.Builder.Builder
                                           (case ww7 of wild {
                                              GHC.Base.Nothing
                                              -> Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties1
                                                   `cast`
                                                 (Trans
                                                      (forall s.
                                                       <Data.Text.Internal.Builder.Buffer s
                                                        -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                       ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                       ->_R Sym (GHC.ST.NTCo:ST[0]
                                                                     <s>_N
                                                                     <[Data.Text.Internal.Text]>_R))
                                                      (Sym (Data.Text.Internal.Builder.NTCo:Builder[0])))
                                              GHC.Base.Just x
                                              -> (Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation2
                                                    x)
                                                   `cast`
                                                 (Trans
                                                      (forall s.
                                                       <Data.Text.Internal.Builder.Buffer s
                                                        -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                                                       ->_R <Data.Text.Internal.Builder.Buffer s>_R
                                                       ->_R Sym (GHC.ST.NTCo:ST[0]
                                                                     <s>_N
                                                                     <[Data.Text.Internal.Text]>_R))
                                                      (Sym (Data.Text.Internal.Builder.NTCo:Builder[0]))) })
                                           (GHC.Types.[]
                                              @ Data.Text.Internal.Builder.Builder)))))))))) -}
b12853535a51b0d68aa53fee712e6d6a
  $w$cshowsPrec ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Arhelk.Russian.Lemma.Data.Verb.ModusIndicativus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood4
                        w1
                   Arhelk.Russian.Lemma.Data.Verb.ModusConditionalis
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood3
                        w1
                   Arhelk.Russian.Lemma.Data.Verb.ModusImperativus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood2
                        w1
                   Arhelk.Russian.Lemma.Data.Verb.ModusInfinitivus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood1
                        w1 }) -}
172ac35ef00cf680590b3e81679c4616
  $w$cshowsPrec1 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Arhelk.Russian.Lemma.Data.Verb.PastTime
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime3
                        w1
                   Arhelk.Russian.Lemma.Data.Verb.PresentTime
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime2
                        w1
                   Arhelk.Russian.Lemma.Data.Verb.FutureTime
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime1
                        w1 }) -}
b7cb278a7105aa122de6c598f8990356
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
729684c8de84ee503730e89c4521d8da
  $w$ctoEnum ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                             ww } }) -}
61cdff692a21466ea52ca4aedbc5b3f5
  $w$ctoEnum1 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                             ww } }) -}
b12853535a51b0d68aa53fee712e6d6a
  $w$ctoEnum2 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood5 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                             ww } }) -}
172ac35ef00cf680590b3e81679c4616
  $w$ctoEnum3 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 2) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                             ww } }) -}
b6bab249be4ba453bb258963386816b8
  $w$ctoEnum4 ::
    GHC.Prim.Int# -> Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False
                   -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False
                        -> Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                             ww } }) -}
729684c8de84ee503730e89c4521d8da
  $wa ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
61cdff692a21466ea52ca4aedbc5b3f5
  $wa1 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
6b5c954307b621bb953e9ede38845ecf
  $wa10 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
1ed9a948460049f6101d2f375c28736d
  $wa11 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
de5baa8bf515f97a45dd8d6582f1b107
  $wa12 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
b12853535a51b0d68aa53fee712e6d6a
  $wa2 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarMood
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
172ac35ef00cf680590b3e81679c4616
  $wa3 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarTime
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
b6bab249be4ba453bb258963386816b8
  $wa4 ::
    Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
    -> forall s.
       (Data.Text.Internal.Builder.Buffer s
        -> GHC.ST.ST s [Data.Text.Internal.Text])
       -> GHC.Prim.MutableByteArray# s
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> GHC.Prim.State# s
       -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 7,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
f70a2acf1dd83545bc79aa7627f7eb2d
  $wa5 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
07dfff4fbb7742193be51da746e73975
  $wa6 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
8c0de0aebdf0a99759c2a21e54328dba
  $wa7 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
40c7498cffda5936d49f5136293ec40f
  $wa8 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
7d3d3bc3cfa093bdbdf8ea8b4f3972f7
  $wa9 ::
    (Data.Text.Internal.Builder.Buffer s
     -> GHC.ST.ST s [Data.Text.Internal.Text])
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   w :: Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]
                   ww :: GHC.Prim.MutableByteArray# s
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   $wa30 :: GHC.Prim.MutableByteArray# s
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> [GHC.Types.Char]
                            -> GHC.Prim.State# s
                            -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                     {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
                        Inline: [0] -}
                   = \ ww4 :: GHC.Prim.MutableByteArray# s
                       ww5 :: GHC.Prim.Int#
                       ww6 :: GHC.Prim.Int#
                       ww7 :: GHC.Prim.Int#
                       w2 :: [GHC.Types.Char]
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case w2 of wild1 {
                       []
                       -> (w (Data.Text.Internal.Builder.Buffer @ s ww4 ww5 ww6 ww7))
                            `cast`
                          (GHC.ST.NTCo:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                            w3
                       : ipv4 ipv5
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww7 1) of wild2 {
                            GHC.Types.False
                            -> case ipv4 of wild3 { GHC.Types.C# c# ->
                               let {
                                 x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x 65536) of wild4 {
                                 GHC.Types.False
                                 -> let {
                                      i# :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                                    } in
                                    let {
                                      x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536
                                    } in
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           i#
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.uncheckedIShiftRA# x# 10)
                                                    55296)))
                                           w3 of s2# { DEFAULT ->
                                    case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# i# 1)
                                           (GHC.Prim.narrow16Word#
                                              (GHC.Prim.int2Word#
                                                 (GHC.Prim.+# (GHC.Prim.andI# x# 1023) 56320)))
                                           s2# of s2#1 { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 2)
                                      (GHC.Prim.-# ww7 2)
                                      ipv5
                                      s2#1 } }
                                 GHC.Types.True
                                 -> case GHC.Prim.writeWord16Array#
                                           @ s
                                           ww4
                                           (GHC.Prim.+# ww5 ww6)
                                           (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                           w3 of s2# { DEFAULT ->
                                    $wa30
                                      ww4
                                      ww5
                                      (GHC.Prim.+# ww6 1)
                                      (GHC.Prim.-# ww7 1)
                                      ipv5
                                      s2# } } }
                            GHC.Types.True
                            -> case GHC.Prim.newByteArray#
                                      @ s
                                      224
                                      w3 of ds3 { (#,#) ipv8 ipv9 ->
                               (# ipv8,
                                  GHC.Types.:
                                    @ Data.Text.Internal.Text
                                    (Data.Text.Internal.Text
                                       ww4
                                         `cast`
                                       (UnivCo mkUnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                              s) GHC.Prim.ByteArray#)
                                       ww5
                                       ww6)
                                    (case $wa30
                                            ipv9
                                            0
                                            0
                                            112
                                            wild1
                                            ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                     ipv11 }) #) } } }
                 } in
                 $wa30 ww ww1 ww2 ww3 (GHC.Types.[] @ GHC.Types.Char) w1) -}
b8073247f4e8773d89470ff4abb60369
  $wgo ::
    [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
    -> (# GHC.Base.Maybe
            Arhelk.Russian.Lemma.Data.Common.GrammarPerson,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice,
          GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
729684c8de84ee503730e89c4521d8da
  data GrammarAspect = PerfectiveAspect | ImperfectiveAspect
    Promotable
61cdff692a21466ea52ca4aedbc5b3f5
  data GrammarConjugation = FirstConjugation | SecondConjugation
    Promotable
b12853535a51b0d68aa53fee712e6d6a
  data GrammarMood
    = ModusIndicativus
    | ModusConditionalis
    | ModusImperativus
    | ModusInfinitivus
    Promotable
172ac35ef00cf680590b3e81679c4616
  data GrammarTime = PastTime | PresentTime | FutureTime
    Promotable
b6bab249be4ba453bb258963386816b8
  data GrammarVoice = ActiveVoice | PassiveVoice
    Promotable
b8073247f4e8773d89470ff4abb60369
  data VerbProperties
    = VerbProperties {_verbPerson :: GHC.Base.Maybe
                                       Arhelk.Russian.Lemma.Data.Common.GrammarPerson,
                      _verbQuantity :: GHC.Base.Maybe
                                         Arhelk.Russian.Lemma.Data.Common.GrammarQuantity,
                      _verbTime :: GHC.Base.Maybe
                                     Arhelk.Russian.Lemma.Data.Verb.GrammarTime,
                      _verbMood :: GHC.Base.Maybe
                                     Arhelk.Russian.Lemma.Data.Verb.GrammarMood,
                      _verbAspect :: GHC.Base.Maybe
                                       Arhelk.Russian.Lemma.Data.Verb.GrammarAspect,
                      _verbGender :: GHC.Base.Maybe
                                       Arhelk.Russian.Lemma.Data.Common.GrammarGender,
                      _verbVoice :: GHC.Base.Maybe
                                      Arhelk.Russian.Lemma.Data.Verb.GrammarVoice,
                      _verbConjugation :: GHC.Base.Maybe
                                            Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation}
    Promotable
a3caa575d8d03a60090c4b4ae1774f99
  _verbAspect ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
3570fc1259859d864036a1a9f198ff84
  _verbConjugation ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
0823823310a5185c03130886a4dfcb43
  _verbGender ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
d4678512a7960114a0fc887f8adfe681
  _verbMood ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
ba5e74905ac86b4bd369fc35433eda1e
  _verbPerson ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
d117a65cc2c33f27cba52a74bdc01d60
  _verbQuantity ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
0fb7be5f3c4cd201346fa2684f950c02
  _verbTime ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
ace0d582353967d58ea77c8f2d164fe3
  _verbVoice ::
    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  RecSel Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 case ds of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
aa62b373ed3560173bf2484b39bcb654
  verbAspect ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
     -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,1*U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                         -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarAspect)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Verb.GrammarAspect ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      ds1
                      ds2
                      ds3
                      x
                      ds5
                      ds6
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds4 }))) -}
b3bbb018f8a2d950f59a194014b31567
  verbConjugation ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,U,U,U,1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe
                        Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      ds1
                      ds2
                      ds3
                      ds4
                      ds5
                      ds6
                      x })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds7 }))) -}
5338716ff26f95bfdc3b5f4cb4ae5b63
  verbGender ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Common.GrammarGender))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,U,1*U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Common.GrammarGender)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarGender)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Common.GrammarGender ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      ds1
                      ds2
                      ds3
                      ds4
                      x
                      ds6
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds5 }))) -}
33b9ea963d80152312fefbfc1aa62745
  verbMood ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
     -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,1*U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                         -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarMood)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Verb.GrammarMood ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      ds1
                      ds2
                      x
                      ds4
                      ds5
                      ds6
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds3 }))) -}
fe3c4d18a1bf593a80159391d36e78cb
  verbPerson ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Common.GrammarPerson))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(1*U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Common.GrammarPerson)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarPerson)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Common.GrammarPerson ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      x
                      ds1
                      ds2
                      ds3
                      ds4
                      ds5
                      ds6
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds }))) -}
72b2c88d6b8cfff69841b5d0fdadbee3
  verbQuantity ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
     -> f (GHC.Base.Maybe
             Arhelk.Russian.Lemma.Data.Common.GrammarQuantity))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,1*U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe
                           Arhelk.Russian.Lemma.Data.Common.GrammarQuantity
                         -> f (GHC.Base.Maybe
                                 Arhelk.Russian.Lemma.Data.Common.GrammarQuantity)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Common.GrammarQuantity)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Common.GrammarQuantity ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      x
                      ds2
                      ds3
                      ds4
                      ds5
                      ds6
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds1 }))) -}
8dce392da2d0f6644f3effa47ecc4613
  verbTime ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
     -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,1*U,U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                         -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarTime)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Verb.GrammarTime ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      ds1
                      x
                      ds3
                      ds4
                      ds5
                      ds6
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds2 }))) -}
a5ab936ef5807e506d5be2dd7355f2d9
  verbVoice ::
    GHC.Base.Functor f =>
    (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
     -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice))
    -> Arhelk.Russian.Lemma.Data.Verb.VerbProperties
    -> f Arhelk.Russian.Lemma.Data.Verb.VerbProperties
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,U,U,1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   f1 :: GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                         -> f (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                   a22 :: Arhelk.Russian.Lemma.Data.Verb.VerbProperties ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Arhelk.Russian.Lemma.Data.Verb.GrammarVoice)
                   @ Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                   (\ x :: GHC.Base.Maybe
                             Arhelk.Russian.Lemma.Data.Verb.GrammarVoice ->
                    case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    Arhelk.Russian.Lemma.Data.Verb.VerbProperties
                      ds
                      ds1
                      ds2
                      ds3
                      ds4
                      ds5
                      x
                      ds7 })
                   (f1
                      (case a22 of wild { Arhelk.Russian.Lemma.Data.Verb.VerbProperties ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds6 }))) -}
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  = Arhelk.Russian.Lemma.Data.Verb.$fBoundedGrammarAspect
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  = Arhelk.Russian.Lemma.Data.Verb.$fBoundedGrammarConjugation
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  = Arhelk.Russian.Lemma.Data.Verb.$fBoundedGrammarMood
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  = Arhelk.Russian.Lemma.Data.Verb.$fBoundedGrammarTime
instance GHC.Enum.Bounded [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  = Arhelk.Russian.Lemma.Data.Verb.$fBoundedGrammarVoice
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  = Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarAspect
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  = Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarConjugation
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  = Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarMood
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  = Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarTime
instance GHC.Enum.Enum [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  = Arhelk.Russian.Lemma.Data.Verb.$fEnumGrammarVoice
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  = Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarAspect
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  = Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarConjugation
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  = Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarMood
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  = Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarTime
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  = Arhelk.Russian.Lemma.Data.Verb.$fEqGrammarVoice
instance GHC.Classes.Eq [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
  = Arhelk.Russian.Lemma.Data.Verb.$fEqVerbProperties
instance GHC.Base.Monoid [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
  = Arhelk.Russian.Lemma.Data.Verb.$fMonoidVerbProperties
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  = Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarAspect
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  = Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarConjugation
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  = Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarMood
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  = Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarTime
instance GHC.Classes.Ord [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  = Arhelk.Russian.Lemma.Data.Verb.$fOrdGrammarVoice
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  = Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarAspect
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  = Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarConjugation
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  = Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarMood
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  = Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarTime
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  = Arhelk.Russian.Lemma.Data.Verb.$fShowGrammarVoice
instance GHC.Show.Show [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
  = Arhelk.Russian.Lemma.Data.Verb.$fShowVerbProperties
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Verb.GrammarAspect]
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation]
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Verb.GrammarMood]
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Verb.GrammarTime]
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Verb.GrammarVoice]
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice
instance TextShow.Classes.TextShow [Arhelk.Russian.Lemma.Data.Verb.VerbProperties]
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowVerbProperties
"SPEC/Arhelk.Russian.Lemma.Data.Verb $dmshowbPrec @ GrammarAspect" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                   Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Verb.GrammarAspect
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarAspect_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Verb $dmshowbPrec @ GrammarConjugation" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                        Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Verb.GrammarConjugation
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarConjugation_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Verb $dmshowbPrec @ GrammarMood" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                 Arhelk.Russian.Lemma.Data.Verb.GrammarMood
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Verb.GrammarMood
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarMood_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Verb $dmshowbPrec @ GrammarTime" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                 Arhelk.Russian.Lemma.Data.Verb.GrammarTime
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Verb.GrammarTime
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarTime_$s$dmshowbPrec
"SPEC/Arhelk.Russian.Lemma.Data.Verb $dmshowbPrec @ GrammarVoice" [ALWAYS] forall $dTextShow :: TextShow.Classes.TextShow
                                                                                                  Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
  TextShow.Classes.$dmshowbPrec @ Arhelk.Russian.Lemma.Data.Verb.GrammarVoice
                                $dTextShow
  = Arhelk.Russian.Lemma.Data.Verb.$fTextShowGrammarVoice_$s$dmshowbPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

